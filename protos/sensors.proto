syntax = "proto3";

// http://www.grpc.io/docs/guides/concepts.html is good reference for #tags

/*  #FrontEnd #Simple
    The FrontEnd server is the endpoint that most client interactions
    should use. These are public facing and used by servers in the outside
    world.

    Note: Currently there is no security in place so this should only be used
    for localhost applications only be used behind a firewall.
*/
service FrontEnd {
  rpc GetLux (GetLuxRequest) returns (GetLuxReply) {}
  rpc GetTemperature (GetTemperatureRequest) returns (GetTemperatureReply) {}
  rpc GetSound (GetSoundRequest) returns (GetSoundReply) {}
  rpc GetIrButtonPressed (GetIrButtonPressedRequest) returns (GetIrButtonPressedReply) {}
  rpc GetSonar (GetSonarRequest) returns (GetSonarReply) {}
  rpc SetLedStrip (SetLedStripRequest) returns (SetLedStripReply) {}
  rpc GetButtonPressed (GetButtonPressedRequest) returns (GetButtonPressedReply) {}
}

/*  #Backend #Simple
    Arduino server handles interactions between Arduino brand devices & other
    servers. (New to Arduino: https://www.arduino.cc/en/Guide/Introduction)

    Note: Do not have clients depend on this it should be behind a FrontEnd.
*/
service Arduino {
  rpc GetIrButtonPressed (GetIrButtonPressedRequest) returns (GetIrButtonPressedReply) {}
  rpc GetSonar (GetSonarRequest) returns (GetSonarReply) {}
}

/*  #Backend #Simple
    WioLink server handles interactions between Wio Link brand devices & other
    servers. (New to Wio Link: http://wiki.seeed.cc/Wio_Link/)

    Note: Do not have clients depend on this it should be behind a FrontEnd.
*/
service WioLink {
  rpc GetLux (GetLuxRequest) returns (GetLuxReply) {}
  rpc GetTemperature (GetTemperatureRequest) returns (GetTemperatureReply) {}
  rpc GetSound (GetSoundRequest) returns (GetSoundReply) {}
  rpc SetLedStrip (SetLedStripRequest) returns (SetLedStripReply) {}
  rpc GetButtonPressed (GetButtonPressedRequest) returns (GetButtonPressedReply) {}
}

/* #Database #Simple
    Dao server handles interactions between servers and the database.

    Note: Do not have clients depend on this it should be behind a
    Backend Server behind a FrontEnd.
*/
service Dao {
  rpc Select(SelectRequest) returns (SelectReply) {}
}
/*  #ServerStreaming #FrontEnd
    Push server pushes data when a sensor event occurs for the client to react
    to.

    Note: This is currently a FrontEnd but it may not be for long. It may need
    to go behind the current FrontEnd server or it may need its own PushFrontEnd
    server.

    TODO: Resolve the note above once a choice is made.
*/
service Push {
  rpc SubscribeButtonPressed(SubscribeButtonPressedRequest) returns (stream GetButtonPressedReply) {}
}

message SubscriptionUpdate {
  enum UpdateStatus {
    NONE = 0;
    SUBSCRIBE = 1;
    UNSUBSCRIBE = 2;
  }
  UpdateStatus status = 1;
}

message SelectRequest {
  string table = 1;
  int32 limit = 2;
  repeated RequestCol cols = 3;
}

message RequestCol {
  string name = 1;
}

message SelectReply {
  repeated DataColumn columns = 1;
}

message DataColumn {
  string name = 1;
  repeated int32 intValues = 2;
  repeated double doubleValues = 3;
  repeated bool boolValues = 4;
  repeated string stringValues = 5;
}

message GetLuxRequest {}

message GetLuxReply {
  int32 lux = 1;
}

message GetTemperatureRequest {}

message GetTemperatureReply {
  float temperature_c = 1;
  float temperature_f = 2;
}

message GetSoundRequest {}

message GetSoundReply {
  int32 loudness = 1;
}

message GetIrButtonPressedRequest{}

message GetIrButtonPressedReply {
	int32 button = 1;
}

message GetSonarRequest{}

message GetSonarReply {
  int32 distance = 1;
}

message GetButtonPressedRequest{}

message SubscribeButtonPressedRequest{
  SubscriptionUpdate update = 1;
  string username = 2;
  int64 index = 3;
}

message GetButtonPressedReply {
	bool pressed = 1;
  // TODO: This may not belong here, it is for the streaming server.
  // This value is the start index for a streaming request.
  int64 start_index = 2;
}

message SetLedStripRequest {
  int32 length  = 1; // the length of the flow, the flow will always begin with index 0.
  int32 brightness = 2; // 0~100
  int32 speed = 3; // 1~10, 10 is the fastest.
}

message SetLedStripReply {}
