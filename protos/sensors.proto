syntax = "proto3";


service FrontEnd {
  rpc GetLux (GetLuxRequest) returns (GetLuxReply) {}
  rpc GetTemperature (GetTemperatureRequest) returns (GetTemperatureReply) {}
  rpc GetSound (GetSoundRequest) returns (GetSoundReply) {}
  rpc GetIrButtonPressed (GetIrButtonPressedRequest) returns (GetIrButtonPressedReply) {}
  rpc GetSonar (GetSonarRequest) returns (GetSonarReply) {}
  rpc SetLedStrip (SetLedStripRequest) returns (SetLedStripReply) {}
  rpc GetButtonPressed (GetButtonPressedRequest) returns (GetButtonPressedReply) {}
}

service Arduino {
  rpc GetIrButtonPressed (GetIrButtonPressedRequest) returns (GetIrButtonPressedReply) {}
  rpc GetSonar (GetSonarRequest) returns (GetSonarReply) {}
}

service WioLink {
  rpc GetLux (GetLuxRequest) returns (GetLuxReply) {}
  rpc GetTemperature (GetTemperatureRequest) returns (GetTemperatureReply) {}
  rpc GetSound (GetSoundRequest) returns (GetSoundReply) {}
  rpc SetLedStrip (SetLedStripRequest) returns (SetLedStripReply) {}
  rpc GetButtonPressed (GetButtonPressedRequest) returns (GetButtonPressedReply) {}
}

service Dao {
  rpc Select(SelectRequest) returns (SelectReply) {}
}

service Push {
  rpc SubscribeButtonPressed(SubscribeButtonPressedRequest) returns (stream GetButtonPressedReply) {}
}

message SubscriptionUpdate {
  enum UpdateStatus {
    NONE = 0;
    SUBSCRIBE = 1;
    UNSUBSCRIBE = 2;
  }
  UpdateStatus status = 1;
}

message SelectRequest {
  string table = 1;
  int32 limit = 2;
  repeated RequestCol cols = 3;
}

message RequestCol {
  string name = 1;
}

message SelectReply {
  repeated DataColumn columns = 1;
}

message DataColumn {
  string name = 1;
  repeated int32 intValues = 2;
  repeated double doubleValues = 3;
  repeated bool boolValues = 4;
  repeated string stringValues = 5;
}

message GetLuxRequest {}

message GetLuxReply {
  int32 lux = 1;
}

message GetTemperatureRequest {}

message GetTemperatureReply {
  float temperature_c = 1;
  float temperature_f = 2;
}

message GetSoundRequest {}

message GetSoundReply {
  int32 loudness = 1;
}

message GetIrButtonPressedRequest{}

message GetIrButtonPressedReply {
	int32 button = 1;
}

message GetSonarRequest{}

message GetSonarReply {
  int32 distance = 1;
}

message GetButtonPressedRequest{}

message SubscribeButtonPressedRequest{
  SubscriptionUpdate update = 1;
  string username = 2;
  int64 index = 3;
}

message GetButtonPressedReply {
	bool pressed = 1;
  // TODO: This may not belong here, it is for the streaming server.
  // This value is the start index for a streaming request.
  int64 start_index = 2;
}

message SetLedStripRequest {
  int32 length  = 1; // the length of the flow, the flow will always begin with index 0.
  int32 brightness = 2; // 0~100
  int32 speed = 3; // 1~10, 10 is the fastest.
}

message SetLedStripReply {}
