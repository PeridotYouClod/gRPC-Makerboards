syntax = "proto3";

// http://www.grpc.io/docs/guides/concepts.html is good reference for #tags

/*  #FrontEnd #Simple
    The FrontEnd server is the endpoint that most client interactions
    should use. These are public facing and used by servers in the outside
    world.

    Note: Currently there is no security in place so this should only be used
    for localhost applications only be used behind a firewall.
*/
service FrontEnd {
  rpc GetLux (GetLuxRequest) returns (GetLuxReply) {}
  rpc GetTemperature (GetTemperatureRequest) returns (GetTemperatureReply) {}
  rpc GetSound (GetSoundRequest) returns (GetSoundReply) {}
  rpc GetIrButtonPressed (GetIrButtonPressedRequest) returns (GetIrButtonPressedReply) {}
  rpc GetSonar (GetSonarRequest) returns (GetSonarReply) {}
  rpc SetLedStrip (SetLedStripRequest) returns (SetLedStripReply) {}
  rpc GetButtonPressed (GetButtonPressedRequest) returns (GetButtonPressedReply) {}
}

/*  #FrontEnd #ServerStreaming
    The FrontEnd server is the endpoint that most client interactions
    should use. These are public facing and used by servers in the outside
    world. This server is for streaming events.

    Note: Currently there is no security in place so this should only be used
    for localhost applications only be used behind a firewall.
*/
service PushFrontEnd {
  rpc Subscribe(SubscribeRequest) returns (SubscribeReply) {}
  rpc StreamButtonPressed(GetButtonPressedRequest) returns (stream GetButtonPressedReply) {}
}

/*  #Backend #Simple
    Arduino server handles interactions between Arduino brand devices & other
    servers. (New to Arduino: https://www.arduino.cc/en/Guide/Introduction)

    Note: Do not have clients depend on this it should be behind a FrontEnd.
*/
service Arduino {
  rpc GetIrButtonPressed (GetIrButtonPressedRequest) returns (GetIrButtonPressedReply) {}
  rpc GetSonar (GetSonarRequest) returns (GetSonarReply) {}
}

/*  #Backend #Simple
    WioLink server handles interactions between Wio Link brand devices & other
    servers. (New to Wio Link: http://wiki.seeed.cc/Wio_Link/)

    Note: Do not have clients depend on this it should be behind a FrontEnd.
*/
service WioLink {
  rpc GetLux (GetLuxRequest) returns (GetLuxReply) {}
  rpc GetTemperature (GetTemperatureRequest) returns (GetTemperatureReply) {}
  rpc GetSound (GetSoundRequest) returns (GetSoundReply) {}
  rpc SetLedStrip (SetLedStripRequest) returns (SetLedStripReply) {}
  rpc GetButtonPressed (GetButtonPressedRequest) returns (GetButtonPressedReply) {}
}

/*  #ServerStreaming #Backend
    Push server pushes data when a sensor event occurs for the client to react
    to.
*/
service Push {
  rpc Subscribe(SubscribeRequest) returns (SubscribeReply) {}
  rpc StreamButtonPressed(GetButtonPressedRequest) returns (stream GetButtonPressedReply) {}
}

message SubscribeRequest {
  enum UpdateStatus {
    NONE = 0;
    SUBSCRIBE = 1;
    UNSUBSCRIBE = 2;
  }
  UpdateStatus status = 1;
  string username = 2;
}

message SubscribeReply {
  int64 start_index = 1;
}

message GetLuxRequest {}

message GetLuxReply {
  int32 lux = 1;
}

message GetTemperatureRequest {}

message GetTemperatureReply {
  float temperature_c = 1;
  float temperature_f = 2;
}

message GetSoundRequest {}

message GetSoundReply {
  int32 loudness = 1;
}

message GetIrButtonPressedRequest{}

message GetIrButtonPressedReply {
	int32 button = 1;
}

message GetSonarRequest{}

message GetSonarReply {
  int32 distance = 1;
}

message GetButtonPressedRequest{
  int64 index = 1;
}

message GetButtonPressedReply {
	bool pressed = 1;
}

message SetLedStripRequest {
  int32 length  = 1; // the length of the flow, the flow will always begin with index 0.
  int32 brightness = 2; // 0~100
  int32 speed = 3; // 1~10, 10 is the fastest.
}

message SetLedStripReply {}
