# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: sensors.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='sensors.proto',
  package='',
  syntax='proto3',
  serialized_pb=_b('\n\rsensors.proto\"\x8e\x01\n\x10SubscribeRequest\x12.\n\x06status\x18\x01 \x01(\x0e\x32\x1e.SubscribeRequest.UpdateStatus\x12\x10\n\x08username\x18\x02 \x01(\t\"8\n\x0cUpdateStatus\x12\x08\n\x04NONE\x10\x00\x12\r\n\tSUBSCRIBE\x10\x01\x12\x0f\n\x0bUNSUBSCRIBE\x10\x02\"%\n\x0eSubscribeReply\x12\x13\n\x0bstart_index\x18\x01 \x01(\x03\"\x0f\n\rGetLuxRequest\"\x1a\n\x0bGetLuxReply\x12\x0b\n\x03lux\x18\x01 \x01(\x05\"\x17\n\x15GetTemperatureRequest\"C\n\x13GetTemperatureReply\x12\x15\n\rtemperature_c\x18\x01 \x01(\x02\x12\x15\n\rtemperature_f\x18\x02 \x01(\x02\"\x11\n\x0fGetSoundRequest\"!\n\rGetSoundReply\x12\x10\n\x08loudness\x18\x01 \x01(\x05\"\x1b\n\x19GetIrButtonPressedRequest\")\n\x17GetIrButtonPressedReply\x12\x0e\n\x06\x62utton\x18\x01 \x01(\x05\"\x11\n\x0fGetSonarRequest\"!\n\rGetSonarReply\x12\x10\n\x08\x64istance\x18\x01 \x01(\x05\"(\n\x17GetButtonPressedRequest\x12\r\n\x05index\x18\x01 \x01(\x03\"(\n\x15GetButtonPressedReply\x12\x0f\n\x07pressed\x18\x01 \x01(\x08\"G\n\x12SetLedStripRequest\x12\x0e\n\x06length\x18\x01 \x01(\x05\x12\x12\n\nbrightness\x18\x02 \x01(\x05\x12\r\n\x05speed\x18\x03 \x01(\x05\"\x12\n\x10SetLedStripReply\"4\n\x16SendToRfBlasterRequest\x12\x0e\n\x06\x62utton\x18\x01 \x01(\x05\x12\n\n\x02on\x18\x02 \x01(\x08\"\'\n\x14SendToRfBlasterReply\x12\x0f\n\x07success\x18\x01 \x01(\x08\x32\xea\x03\n\x08\x46rontEnd\x12(\n\x06GetLux\x12\x0e.GetLuxRequest\x1a\x0c.GetLuxReply\"\x00\x12@\n\x0eGetTemperature\x12\x16.GetTemperatureRequest\x1a\x14.GetTemperatureReply\"\x00\x12.\n\x08GetSound\x12\x10.GetSoundRequest\x1a\x0e.GetSoundReply\"\x00\x12L\n\x12GetIrButtonPressed\x12\x1a.GetIrButtonPressedRequest\x1a\x18.GetIrButtonPressedReply\"\x00\x12.\n\x08GetSonar\x12\x10.GetSonarRequest\x1a\x0e.GetSonarReply\"\x00\x12\x37\n\x0bSetLedStrip\x12\x13.SetLedStripRequest\x1a\x11.SetLedStripReply\"\x00\x12\x46\n\x10GetButtonPressed\x12\x18.GetButtonPressedRequest\x1a\x16.GetButtonPressedReply\"\x00\x12\x43\n\x0fSendToRfBlaster\x12\x17.SendToRfBlasterRequest\x1a\x15.SendToRfBlasterReply\"\x00\x32\x8e\x01\n\x0cPushFrontEnd\x12\x31\n\tSubscribe\x12\x11.SubscribeRequest\x1a\x0f.SubscribeReply\"\x00\x12K\n\x13StreamButtonPressed\x12\x18.GetButtonPressedRequest\x1a\x16.GetButtonPressedReply\"\x00\x30\x01\x32\xcc\x01\n\x07\x41rduino\x12L\n\x12GetIrButtonPressed\x12\x1a.GetIrButtonPressedRequest\x1a\x18.GetIrButtonPressedReply\"\x00\x12.\n\x08GetSonar\x12\x10.GetSonarRequest\x1a\x0e.GetSonarReply\"\x00\x12\x43\n\x0fSendToRfBlaster\x12\x17.SendToRfBlasterRequest\x1a\x15.SendToRfBlasterReply\"\x00\x32\xa6\x02\n\x07WioLink\x12(\n\x06GetLux\x12\x0e.GetLuxRequest\x1a\x0c.GetLuxReply\"\x00\x12@\n\x0eGetTemperature\x12\x16.GetTemperatureRequest\x1a\x14.GetTemperatureReply\"\x00\x12.\n\x08GetSound\x12\x10.GetSoundRequest\x1a\x0e.GetSoundReply\"\x00\x12\x37\n\x0bSetLedStrip\x12\x13.SetLedStripRequest\x1a\x11.SetLedStripReply\"\x00\x12\x46\n\x10GetButtonPressed\x12\x18.GetButtonPressedRequest\x1a\x16.GetButtonPressedReply\"\x00\x32\x86\x01\n\x04Push\x12\x31\n\tSubscribe\x12\x11.SubscribeRequest\x1a\x0f.SubscribeReply\"\x00\x12K\n\x13StreamButtonPressed\x12\x18.GetButtonPressedRequest\x1a\x16.GetButtonPressedReply\"\x00\x30\x01\x62\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)



_SUBSCRIBEREQUEST_UPDATESTATUS = _descriptor.EnumDescriptor(
  name='UpdateStatus',
  full_name='SubscribeRequest.UpdateStatus',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='NONE', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SUBSCRIBE', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='UNSUBSCRIBE', index=2, number=2,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=104,
  serialized_end=160,
)
_sym_db.RegisterEnumDescriptor(_SUBSCRIBEREQUEST_UPDATESTATUS)


_SUBSCRIBEREQUEST = _descriptor.Descriptor(
  name='SubscribeRequest',
  full_name='SubscribeRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='status', full_name='SubscribeRequest.status', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='username', full_name='SubscribeRequest.username', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _SUBSCRIBEREQUEST_UPDATESTATUS,
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=18,
  serialized_end=160,
)


_SUBSCRIBEREPLY = _descriptor.Descriptor(
  name='SubscribeReply',
  full_name='SubscribeReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='start_index', full_name='SubscribeReply.start_index', index=0,
      number=1, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=162,
  serialized_end=199,
)


_GETLUXREQUEST = _descriptor.Descriptor(
  name='GetLuxRequest',
  full_name='GetLuxRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=201,
  serialized_end=216,
)


_GETLUXREPLY = _descriptor.Descriptor(
  name='GetLuxReply',
  full_name='GetLuxReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='lux', full_name='GetLuxReply.lux', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=218,
  serialized_end=244,
)


_GETTEMPERATUREREQUEST = _descriptor.Descriptor(
  name='GetTemperatureRequest',
  full_name='GetTemperatureRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=246,
  serialized_end=269,
)


_GETTEMPERATUREREPLY = _descriptor.Descriptor(
  name='GetTemperatureReply',
  full_name='GetTemperatureReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='temperature_c', full_name='GetTemperatureReply.temperature_c', index=0,
      number=1, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='temperature_f', full_name='GetTemperatureReply.temperature_f', index=1,
      number=2, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=271,
  serialized_end=338,
)


_GETSOUNDREQUEST = _descriptor.Descriptor(
  name='GetSoundRequest',
  full_name='GetSoundRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=340,
  serialized_end=357,
)


_GETSOUNDREPLY = _descriptor.Descriptor(
  name='GetSoundReply',
  full_name='GetSoundReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='loudness', full_name='GetSoundReply.loudness', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=359,
  serialized_end=392,
)


_GETIRBUTTONPRESSEDREQUEST = _descriptor.Descriptor(
  name='GetIrButtonPressedRequest',
  full_name='GetIrButtonPressedRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=394,
  serialized_end=421,
)


_GETIRBUTTONPRESSEDREPLY = _descriptor.Descriptor(
  name='GetIrButtonPressedReply',
  full_name='GetIrButtonPressedReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='button', full_name='GetIrButtonPressedReply.button', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=423,
  serialized_end=464,
)


_GETSONARREQUEST = _descriptor.Descriptor(
  name='GetSonarRequest',
  full_name='GetSonarRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=466,
  serialized_end=483,
)


_GETSONARREPLY = _descriptor.Descriptor(
  name='GetSonarReply',
  full_name='GetSonarReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='distance', full_name='GetSonarReply.distance', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=485,
  serialized_end=518,
)


_GETBUTTONPRESSEDREQUEST = _descriptor.Descriptor(
  name='GetButtonPressedRequest',
  full_name='GetButtonPressedRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='index', full_name='GetButtonPressedRequest.index', index=0,
      number=1, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=520,
  serialized_end=560,
)


_GETBUTTONPRESSEDREPLY = _descriptor.Descriptor(
  name='GetButtonPressedReply',
  full_name='GetButtonPressedReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='pressed', full_name='GetButtonPressedReply.pressed', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=562,
  serialized_end=602,
)


_SETLEDSTRIPREQUEST = _descriptor.Descriptor(
  name='SetLedStripRequest',
  full_name='SetLedStripRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='length', full_name='SetLedStripRequest.length', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='brightness', full_name='SetLedStripRequest.brightness', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='speed', full_name='SetLedStripRequest.speed', index=2,
      number=3, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=604,
  serialized_end=675,
)


_SETLEDSTRIPREPLY = _descriptor.Descriptor(
  name='SetLedStripReply',
  full_name='SetLedStripReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=677,
  serialized_end=695,
)


_SENDTORFBLASTERREQUEST = _descriptor.Descriptor(
  name='SendToRfBlasterRequest',
  full_name='SendToRfBlasterRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='button', full_name='SendToRfBlasterRequest.button', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='on', full_name='SendToRfBlasterRequest.on', index=1,
      number=2, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=697,
  serialized_end=749,
)


_SENDTORFBLASTERREPLY = _descriptor.Descriptor(
  name='SendToRfBlasterReply',
  full_name='SendToRfBlasterReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='success', full_name='SendToRfBlasterReply.success', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=751,
  serialized_end=790,
)

_SUBSCRIBEREQUEST.fields_by_name['status'].enum_type = _SUBSCRIBEREQUEST_UPDATESTATUS
_SUBSCRIBEREQUEST_UPDATESTATUS.containing_type = _SUBSCRIBEREQUEST
DESCRIPTOR.message_types_by_name['SubscribeRequest'] = _SUBSCRIBEREQUEST
DESCRIPTOR.message_types_by_name['SubscribeReply'] = _SUBSCRIBEREPLY
DESCRIPTOR.message_types_by_name['GetLuxRequest'] = _GETLUXREQUEST
DESCRIPTOR.message_types_by_name['GetLuxReply'] = _GETLUXREPLY
DESCRIPTOR.message_types_by_name['GetTemperatureRequest'] = _GETTEMPERATUREREQUEST
DESCRIPTOR.message_types_by_name['GetTemperatureReply'] = _GETTEMPERATUREREPLY
DESCRIPTOR.message_types_by_name['GetSoundRequest'] = _GETSOUNDREQUEST
DESCRIPTOR.message_types_by_name['GetSoundReply'] = _GETSOUNDREPLY
DESCRIPTOR.message_types_by_name['GetIrButtonPressedRequest'] = _GETIRBUTTONPRESSEDREQUEST
DESCRIPTOR.message_types_by_name['GetIrButtonPressedReply'] = _GETIRBUTTONPRESSEDREPLY
DESCRIPTOR.message_types_by_name['GetSonarRequest'] = _GETSONARREQUEST
DESCRIPTOR.message_types_by_name['GetSonarReply'] = _GETSONARREPLY
DESCRIPTOR.message_types_by_name['GetButtonPressedRequest'] = _GETBUTTONPRESSEDREQUEST
DESCRIPTOR.message_types_by_name['GetButtonPressedReply'] = _GETBUTTONPRESSEDREPLY
DESCRIPTOR.message_types_by_name['SetLedStripRequest'] = _SETLEDSTRIPREQUEST
DESCRIPTOR.message_types_by_name['SetLedStripReply'] = _SETLEDSTRIPREPLY
DESCRIPTOR.message_types_by_name['SendToRfBlasterRequest'] = _SENDTORFBLASTERREQUEST
DESCRIPTOR.message_types_by_name['SendToRfBlasterReply'] = _SENDTORFBLASTERREPLY

SubscribeRequest = _reflection.GeneratedProtocolMessageType('SubscribeRequest', (_message.Message,), dict(
  DESCRIPTOR = _SUBSCRIBEREQUEST,
  __module__ = 'sensors_pb2'
  # @@protoc_insertion_point(class_scope:SubscribeRequest)
  ))
_sym_db.RegisterMessage(SubscribeRequest)

SubscribeReply = _reflection.GeneratedProtocolMessageType('SubscribeReply', (_message.Message,), dict(
  DESCRIPTOR = _SUBSCRIBEREPLY,
  __module__ = 'sensors_pb2'
  # @@protoc_insertion_point(class_scope:SubscribeReply)
  ))
_sym_db.RegisterMessage(SubscribeReply)

GetLuxRequest = _reflection.GeneratedProtocolMessageType('GetLuxRequest', (_message.Message,), dict(
  DESCRIPTOR = _GETLUXREQUEST,
  __module__ = 'sensors_pb2'
  # @@protoc_insertion_point(class_scope:GetLuxRequest)
  ))
_sym_db.RegisterMessage(GetLuxRequest)

GetLuxReply = _reflection.GeneratedProtocolMessageType('GetLuxReply', (_message.Message,), dict(
  DESCRIPTOR = _GETLUXREPLY,
  __module__ = 'sensors_pb2'
  # @@protoc_insertion_point(class_scope:GetLuxReply)
  ))
_sym_db.RegisterMessage(GetLuxReply)

GetTemperatureRequest = _reflection.GeneratedProtocolMessageType('GetTemperatureRequest', (_message.Message,), dict(
  DESCRIPTOR = _GETTEMPERATUREREQUEST,
  __module__ = 'sensors_pb2'
  # @@protoc_insertion_point(class_scope:GetTemperatureRequest)
  ))
_sym_db.RegisterMessage(GetTemperatureRequest)

GetTemperatureReply = _reflection.GeneratedProtocolMessageType('GetTemperatureReply', (_message.Message,), dict(
  DESCRIPTOR = _GETTEMPERATUREREPLY,
  __module__ = 'sensors_pb2'
  # @@protoc_insertion_point(class_scope:GetTemperatureReply)
  ))
_sym_db.RegisterMessage(GetTemperatureReply)

GetSoundRequest = _reflection.GeneratedProtocolMessageType('GetSoundRequest', (_message.Message,), dict(
  DESCRIPTOR = _GETSOUNDREQUEST,
  __module__ = 'sensors_pb2'
  # @@protoc_insertion_point(class_scope:GetSoundRequest)
  ))
_sym_db.RegisterMessage(GetSoundRequest)

GetSoundReply = _reflection.GeneratedProtocolMessageType('GetSoundReply', (_message.Message,), dict(
  DESCRIPTOR = _GETSOUNDREPLY,
  __module__ = 'sensors_pb2'
  # @@protoc_insertion_point(class_scope:GetSoundReply)
  ))
_sym_db.RegisterMessage(GetSoundReply)

GetIrButtonPressedRequest = _reflection.GeneratedProtocolMessageType('GetIrButtonPressedRequest', (_message.Message,), dict(
  DESCRIPTOR = _GETIRBUTTONPRESSEDREQUEST,
  __module__ = 'sensors_pb2'
  # @@protoc_insertion_point(class_scope:GetIrButtonPressedRequest)
  ))
_sym_db.RegisterMessage(GetIrButtonPressedRequest)

GetIrButtonPressedReply = _reflection.GeneratedProtocolMessageType('GetIrButtonPressedReply', (_message.Message,), dict(
  DESCRIPTOR = _GETIRBUTTONPRESSEDREPLY,
  __module__ = 'sensors_pb2'
  # @@protoc_insertion_point(class_scope:GetIrButtonPressedReply)
  ))
_sym_db.RegisterMessage(GetIrButtonPressedReply)

GetSonarRequest = _reflection.GeneratedProtocolMessageType('GetSonarRequest', (_message.Message,), dict(
  DESCRIPTOR = _GETSONARREQUEST,
  __module__ = 'sensors_pb2'
  # @@protoc_insertion_point(class_scope:GetSonarRequest)
  ))
_sym_db.RegisterMessage(GetSonarRequest)

GetSonarReply = _reflection.GeneratedProtocolMessageType('GetSonarReply', (_message.Message,), dict(
  DESCRIPTOR = _GETSONARREPLY,
  __module__ = 'sensors_pb2'
  # @@protoc_insertion_point(class_scope:GetSonarReply)
  ))
_sym_db.RegisterMessage(GetSonarReply)

GetButtonPressedRequest = _reflection.GeneratedProtocolMessageType('GetButtonPressedRequest', (_message.Message,), dict(
  DESCRIPTOR = _GETBUTTONPRESSEDREQUEST,
  __module__ = 'sensors_pb2'
  # @@protoc_insertion_point(class_scope:GetButtonPressedRequest)
  ))
_sym_db.RegisterMessage(GetButtonPressedRequest)

GetButtonPressedReply = _reflection.GeneratedProtocolMessageType('GetButtonPressedReply', (_message.Message,), dict(
  DESCRIPTOR = _GETBUTTONPRESSEDREPLY,
  __module__ = 'sensors_pb2'
  # @@protoc_insertion_point(class_scope:GetButtonPressedReply)
  ))
_sym_db.RegisterMessage(GetButtonPressedReply)

SetLedStripRequest = _reflection.GeneratedProtocolMessageType('SetLedStripRequest', (_message.Message,), dict(
  DESCRIPTOR = _SETLEDSTRIPREQUEST,
  __module__ = 'sensors_pb2'
  # @@protoc_insertion_point(class_scope:SetLedStripRequest)
  ))
_sym_db.RegisterMessage(SetLedStripRequest)

SetLedStripReply = _reflection.GeneratedProtocolMessageType('SetLedStripReply', (_message.Message,), dict(
  DESCRIPTOR = _SETLEDSTRIPREPLY,
  __module__ = 'sensors_pb2'
  # @@protoc_insertion_point(class_scope:SetLedStripReply)
  ))
_sym_db.RegisterMessage(SetLedStripReply)

SendToRfBlasterRequest = _reflection.GeneratedProtocolMessageType('SendToRfBlasterRequest', (_message.Message,), dict(
  DESCRIPTOR = _SENDTORFBLASTERREQUEST,
  __module__ = 'sensors_pb2'
  # @@protoc_insertion_point(class_scope:SendToRfBlasterRequest)
  ))
_sym_db.RegisterMessage(SendToRfBlasterRequest)

SendToRfBlasterReply = _reflection.GeneratedProtocolMessageType('SendToRfBlasterReply', (_message.Message,), dict(
  DESCRIPTOR = _SENDTORFBLASTERREPLY,
  __module__ = 'sensors_pb2'
  # @@protoc_insertion_point(class_scope:SendToRfBlasterReply)
  ))
_sym_db.RegisterMessage(SendToRfBlasterReply)


try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces


  class FrontEndStub(object):
    """http://www.grpc.io/docs/guides/concepts.html is good reference for #tags

    #FrontEnd #Simple
    The FrontEnd server is the endpoint that most client interactions
    should use. These are public facing and used by servers in the outside
    world.

    Note: Currently there is no security in place so this should only be used
    for localhost applications only be used behind a firewall.
    """

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.GetLux = channel.unary_unary(
          '/FrontEnd/GetLux',
          request_serializer=GetLuxRequest.SerializeToString,
          response_deserializer=GetLuxReply.FromString,
          )
      self.GetTemperature = channel.unary_unary(
          '/FrontEnd/GetTemperature',
          request_serializer=GetTemperatureRequest.SerializeToString,
          response_deserializer=GetTemperatureReply.FromString,
          )
      self.GetSound = channel.unary_unary(
          '/FrontEnd/GetSound',
          request_serializer=GetSoundRequest.SerializeToString,
          response_deserializer=GetSoundReply.FromString,
          )
      self.GetIrButtonPressed = channel.unary_unary(
          '/FrontEnd/GetIrButtonPressed',
          request_serializer=GetIrButtonPressedRequest.SerializeToString,
          response_deserializer=GetIrButtonPressedReply.FromString,
          )
      self.GetSonar = channel.unary_unary(
          '/FrontEnd/GetSonar',
          request_serializer=GetSonarRequest.SerializeToString,
          response_deserializer=GetSonarReply.FromString,
          )
      self.SetLedStrip = channel.unary_unary(
          '/FrontEnd/SetLedStrip',
          request_serializer=SetLedStripRequest.SerializeToString,
          response_deserializer=SetLedStripReply.FromString,
          )
      self.GetButtonPressed = channel.unary_unary(
          '/FrontEnd/GetButtonPressed',
          request_serializer=GetButtonPressedRequest.SerializeToString,
          response_deserializer=GetButtonPressedReply.FromString,
          )
      self.SendToRfBlaster = channel.unary_unary(
          '/FrontEnd/SendToRfBlaster',
          request_serializer=SendToRfBlasterRequest.SerializeToString,
          response_deserializer=SendToRfBlasterReply.FromString,
          )


  class FrontEndServicer(object):
    """http://www.grpc.io/docs/guides/concepts.html is good reference for #tags

    #FrontEnd #Simple
    The FrontEnd server is the endpoint that most client interactions
    should use. These are public facing and used by servers in the outside
    world.

    Note: Currently there is no security in place so this should only be used
    for localhost applications only be used behind a firewall.
    """

    def GetLux(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetTemperature(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetSound(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetIrButtonPressed(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetSonar(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def SetLedStrip(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetButtonPressed(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def SendToRfBlaster(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_FrontEndServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'GetLux': grpc.unary_unary_rpc_method_handler(
            servicer.GetLux,
            request_deserializer=GetLuxRequest.FromString,
            response_serializer=GetLuxReply.SerializeToString,
        ),
        'GetTemperature': grpc.unary_unary_rpc_method_handler(
            servicer.GetTemperature,
            request_deserializer=GetTemperatureRequest.FromString,
            response_serializer=GetTemperatureReply.SerializeToString,
        ),
        'GetSound': grpc.unary_unary_rpc_method_handler(
            servicer.GetSound,
            request_deserializer=GetSoundRequest.FromString,
            response_serializer=GetSoundReply.SerializeToString,
        ),
        'GetIrButtonPressed': grpc.unary_unary_rpc_method_handler(
            servicer.GetIrButtonPressed,
            request_deserializer=GetIrButtonPressedRequest.FromString,
            response_serializer=GetIrButtonPressedReply.SerializeToString,
        ),
        'GetSonar': grpc.unary_unary_rpc_method_handler(
            servicer.GetSonar,
            request_deserializer=GetSonarRequest.FromString,
            response_serializer=GetSonarReply.SerializeToString,
        ),
        'SetLedStrip': grpc.unary_unary_rpc_method_handler(
            servicer.SetLedStrip,
            request_deserializer=SetLedStripRequest.FromString,
            response_serializer=SetLedStripReply.SerializeToString,
        ),
        'GetButtonPressed': grpc.unary_unary_rpc_method_handler(
            servicer.GetButtonPressed,
            request_deserializer=GetButtonPressedRequest.FromString,
            response_serializer=GetButtonPressedReply.SerializeToString,
        ),
        'SendToRfBlaster': grpc.unary_unary_rpc_method_handler(
            servicer.SendToRfBlaster,
            request_deserializer=SendToRfBlasterRequest.FromString,
            response_serializer=SendToRfBlasterReply.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'FrontEnd', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class PushFrontEndStub(object):
    """#FrontEnd #ServerStreaming
    The FrontEnd server is the endpoint that most client interactions
    should use. These are public facing and used by servers in the outside
    world. This server is for streaming events.

    Note: Currently there is no security in place so this should only be used
    for localhost applications only be used behind a firewall.
    """

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.Subscribe = channel.unary_unary(
          '/PushFrontEnd/Subscribe',
          request_serializer=SubscribeRequest.SerializeToString,
          response_deserializer=SubscribeReply.FromString,
          )
      self.StreamButtonPressed = channel.unary_stream(
          '/PushFrontEnd/StreamButtonPressed',
          request_serializer=GetButtonPressedRequest.SerializeToString,
          response_deserializer=GetButtonPressedReply.FromString,
          )


  class PushFrontEndServicer(object):
    """#FrontEnd #ServerStreaming
    The FrontEnd server is the endpoint that most client interactions
    should use. These are public facing and used by servers in the outside
    world. This server is for streaming events.

    Note: Currently there is no security in place so this should only be used
    for localhost applications only be used behind a firewall.
    """

    def Subscribe(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def StreamButtonPressed(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_PushFrontEndServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'Subscribe': grpc.unary_unary_rpc_method_handler(
            servicer.Subscribe,
            request_deserializer=SubscribeRequest.FromString,
            response_serializer=SubscribeReply.SerializeToString,
        ),
        'StreamButtonPressed': grpc.unary_stream_rpc_method_handler(
            servicer.StreamButtonPressed,
            request_deserializer=GetButtonPressedRequest.FromString,
            response_serializer=GetButtonPressedReply.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'PushFrontEnd', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class ArduinoStub(object):
    """#Backend #Simple
    Arduino server handles interactions between Arduino brand devices & other
    servers. (New to Arduino: https://www.arduino.cc/en/Guide/Introduction)

    Note: Do not have clients depend on this it should be behind a FrontEnd.
    """

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.GetIrButtonPressed = channel.unary_unary(
          '/Arduino/GetIrButtonPressed',
          request_serializer=GetIrButtonPressedRequest.SerializeToString,
          response_deserializer=GetIrButtonPressedReply.FromString,
          )
      self.GetSonar = channel.unary_unary(
          '/Arduino/GetSonar',
          request_serializer=GetSonarRequest.SerializeToString,
          response_deserializer=GetSonarReply.FromString,
          )
      self.SendToRfBlaster = channel.unary_unary(
          '/Arduino/SendToRfBlaster',
          request_serializer=SendToRfBlasterRequest.SerializeToString,
          response_deserializer=SendToRfBlasterReply.FromString,
          )


  class ArduinoServicer(object):
    """#Backend #Simple
    Arduino server handles interactions between Arduino brand devices & other
    servers. (New to Arduino: https://www.arduino.cc/en/Guide/Introduction)

    Note: Do not have clients depend on this it should be behind a FrontEnd.
    """

    def GetIrButtonPressed(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetSonar(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def SendToRfBlaster(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_ArduinoServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'GetIrButtonPressed': grpc.unary_unary_rpc_method_handler(
            servicer.GetIrButtonPressed,
            request_deserializer=GetIrButtonPressedRequest.FromString,
            response_serializer=GetIrButtonPressedReply.SerializeToString,
        ),
        'GetSonar': grpc.unary_unary_rpc_method_handler(
            servicer.GetSonar,
            request_deserializer=GetSonarRequest.FromString,
            response_serializer=GetSonarReply.SerializeToString,
        ),
        'SendToRfBlaster': grpc.unary_unary_rpc_method_handler(
            servicer.SendToRfBlaster,
            request_deserializer=SendToRfBlasterRequest.FromString,
            response_serializer=SendToRfBlasterReply.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'Arduino', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class WioLinkStub(object):
    """#Backend #Simple
    WioLink server handles interactions between Wio Link brand devices & other
    servers. (New to Wio Link: http://wiki.seeed.cc/Wio_Link/)

    Note: Do not have clients depend on this it should be behind a FrontEnd.
    """

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.GetLux = channel.unary_unary(
          '/WioLink/GetLux',
          request_serializer=GetLuxRequest.SerializeToString,
          response_deserializer=GetLuxReply.FromString,
          )
      self.GetTemperature = channel.unary_unary(
          '/WioLink/GetTemperature',
          request_serializer=GetTemperatureRequest.SerializeToString,
          response_deserializer=GetTemperatureReply.FromString,
          )
      self.GetSound = channel.unary_unary(
          '/WioLink/GetSound',
          request_serializer=GetSoundRequest.SerializeToString,
          response_deserializer=GetSoundReply.FromString,
          )
      self.SetLedStrip = channel.unary_unary(
          '/WioLink/SetLedStrip',
          request_serializer=SetLedStripRequest.SerializeToString,
          response_deserializer=SetLedStripReply.FromString,
          )
      self.GetButtonPressed = channel.unary_unary(
          '/WioLink/GetButtonPressed',
          request_serializer=GetButtonPressedRequest.SerializeToString,
          response_deserializer=GetButtonPressedReply.FromString,
          )


  class WioLinkServicer(object):
    """#Backend #Simple
    WioLink server handles interactions between Wio Link brand devices & other
    servers. (New to Wio Link: http://wiki.seeed.cc/Wio_Link/)

    Note: Do not have clients depend on this it should be behind a FrontEnd.
    """

    def GetLux(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetTemperature(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetSound(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def SetLedStrip(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetButtonPressed(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_WioLinkServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'GetLux': grpc.unary_unary_rpc_method_handler(
            servicer.GetLux,
            request_deserializer=GetLuxRequest.FromString,
            response_serializer=GetLuxReply.SerializeToString,
        ),
        'GetTemperature': grpc.unary_unary_rpc_method_handler(
            servicer.GetTemperature,
            request_deserializer=GetTemperatureRequest.FromString,
            response_serializer=GetTemperatureReply.SerializeToString,
        ),
        'GetSound': grpc.unary_unary_rpc_method_handler(
            servicer.GetSound,
            request_deserializer=GetSoundRequest.FromString,
            response_serializer=GetSoundReply.SerializeToString,
        ),
        'SetLedStrip': grpc.unary_unary_rpc_method_handler(
            servicer.SetLedStrip,
            request_deserializer=SetLedStripRequest.FromString,
            response_serializer=SetLedStripReply.SerializeToString,
        ),
        'GetButtonPressed': grpc.unary_unary_rpc_method_handler(
            servicer.GetButtonPressed,
            request_deserializer=GetButtonPressedRequest.FromString,
            response_serializer=GetButtonPressedReply.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'WioLink', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class PushStub(object):
    """#ServerStreaming #Backend
    Push server pushes data when a sensor event occurs for the client to react
    to.
    """

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.Subscribe = channel.unary_unary(
          '/Push/Subscribe',
          request_serializer=SubscribeRequest.SerializeToString,
          response_deserializer=SubscribeReply.FromString,
          )
      self.StreamButtonPressed = channel.unary_stream(
          '/Push/StreamButtonPressed',
          request_serializer=GetButtonPressedRequest.SerializeToString,
          response_deserializer=GetButtonPressedReply.FromString,
          )


  class PushServicer(object):
    """#ServerStreaming #Backend
    Push server pushes data when a sensor event occurs for the client to react
    to.
    """

    def Subscribe(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def StreamButtonPressed(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_PushServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'Subscribe': grpc.unary_unary_rpc_method_handler(
            servicer.Subscribe,
            request_deserializer=SubscribeRequest.FromString,
            response_serializer=SubscribeReply.SerializeToString,
        ),
        'StreamButtonPressed': grpc.unary_stream_rpc_method_handler(
            servicer.StreamButtonPressed,
            request_deserializer=GetButtonPressedRequest.FromString,
            response_serializer=GetButtonPressedReply.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'Push', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaFrontEndServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """http://www.grpc.io/docs/guides/concepts.html is good reference for #tags

    #FrontEnd #Simple
    The FrontEnd server is the endpoint that most client interactions
    should use. These are public facing and used by servers in the outside
    world.

    Note: Currently there is no security in place so this should only be used
    for localhost applications only be used behind a firewall.
    """
    def GetLux(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetTemperature(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetSound(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetIrButtonPressed(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetSonar(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def SetLedStrip(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetButtonPressed(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def SendToRfBlaster(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaFrontEndStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """http://www.grpc.io/docs/guides/concepts.html is good reference for #tags

    #FrontEnd #Simple
    The FrontEnd server is the endpoint that most client interactions
    should use. These are public facing and used by servers in the outside
    world.

    Note: Currently there is no security in place so this should only be used
    for localhost applications only be used behind a firewall.
    """
    def GetLux(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    GetLux.future = None
    def GetTemperature(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    GetTemperature.future = None
    def GetSound(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    GetSound.future = None
    def GetIrButtonPressed(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    GetIrButtonPressed.future = None
    def GetSonar(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    GetSonar.future = None
    def SetLedStrip(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    SetLedStrip.future = None
    def GetButtonPressed(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    GetButtonPressed.future = None
    def SendToRfBlaster(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    SendToRfBlaster.future = None


  def beta_create_FrontEnd_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('FrontEnd', 'GetButtonPressed'): GetButtonPressedRequest.FromString,
      ('FrontEnd', 'GetIrButtonPressed'): GetIrButtonPressedRequest.FromString,
      ('FrontEnd', 'GetLux'): GetLuxRequest.FromString,
      ('FrontEnd', 'GetSonar'): GetSonarRequest.FromString,
      ('FrontEnd', 'GetSound'): GetSoundRequest.FromString,
      ('FrontEnd', 'GetTemperature'): GetTemperatureRequest.FromString,
      ('FrontEnd', 'SendToRfBlaster'): SendToRfBlasterRequest.FromString,
      ('FrontEnd', 'SetLedStrip'): SetLedStripRequest.FromString,
    }
    response_serializers = {
      ('FrontEnd', 'GetButtonPressed'): GetButtonPressedReply.SerializeToString,
      ('FrontEnd', 'GetIrButtonPressed'): GetIrButtonPressedReply.SerializeToString,
      ('FrontEnd', 'GetLux'): GetLuxReply.SerializeToString,
      ('FrontEnd', 'GetSonar'): GetSonarReply.SerializeToString,
      ('FrontEnd', 'GetSound'): GetSoundReply.SerializeToString,
      ('FrontEnd', 'GetTemperature'): GetTemperatureReply.SerializeToString,
      ('FrontEnd', 'SendToRfBlaster'): SendToRfBlasterReply.SerializeToString,
      ('FrontEnd', 'SetLedStrip'): SetLedStripReply.SerializeToString,
    }
    method_implementations = {
      ('FrontEnd', 'GetButtonPressed'): face_utilities.unary_unary_inline(servicer.GetButtonPressed),
      ('FrontEnd', 'GetIrButtonPressed'): face_utilities.unary_unary_inline(servicer.GetIrButtonPressed),
      ('FrontEnd', 'GetLux'): face_utilities.unary_unary_inline(servicer.GetLux),
      ('FrontEnd', 'GetSonar'): face_utilities.unary_unary_inline(servicer.GetSonar),
      ('FrontEnd', 'GetSound'): face_utilities.unary_unary_inline(servicer.GetSound),
      ('FrontEnd', 'GetTemperature'): face_utilities.unary_unary_inline(servicer.GetTemperature),
      ('FrontEnd', 'SendToRfBlaster'): face_utilities.unary_unary_inline(servicer.SendToRfBlaster),
      ('FrontEnd', 'SetLedStrip'): face_utilities.unary_unary_inline(servicer.SetLedStrip),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_FrontEnd_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('FrontEnd', 'GetButtonPressed'): GetButtonPressedRequest.SerializeToString,
      ('FrontEnd', 'GetIrButtonPressed'): GetIrButtonPressedRequest.SerializeToString,
      ('FrontEnd', 'GetLux'): GetLuxRequest.SerializeToString,
      ('FrontEnd', 'GetSonar'): GetSonarRequest.SerializeToString,
      ('FrontEnd', 'GetSound'): GetSoundRequest.SerializeToString,
      ('FrontEnd', 'GetTemperature'): GetTemperatureRequest.SerializeToString,
      ('FrontEnd', 'SendToRfBlaster'): SendToRfBlasterRequest.SerializeToString,
      ('FrontEnd', 'SetLedStrip'): SetLedStripRequest.SerializeToString,
    }
    response_deserializers = {
      ('FrontEnd', 'GetButtonPressed'): GetButtonPressedReply.FromString,
      ('FrontEnd', 'GetIrButtonPressed'): GetIrButtonPressedReply.FromString,
      ('FrontEnd', 'GetLux'): GetLuxReply.FromString,
      ('FrontEnd', 'GetSonar'): GetSonarReply.FromString,
      ('FrontEnd', 'GetSound'): GetSoundReply.FromString,
      ('FrontEnd', 'GetTemperature'): GetTemperatureReply.FromString,
      ('FrontEnd', 'SendToRfBlaster'): SendToRfBlasterReply.FromString,
      ('FrontEnd', 'SetLedStrip'): SetLedStripReply.FromString,
    }
    cardinalities = {
      'GetButtonPressed': cardinality.Cardinality.UNARY_UNARY,
      'GetIrButtonPressed': cardinality.Cardinality.UNARY_UNARY,
      'GetLux': cardinality.Cardinality.UNARY_UNARY,
      'GetSonar': cardinality.Cardinality.UNARY_UNARY,
      'GetSound': cardinality.Cardinality.UNARY_UNARY,
      'GetTemperature': cardinality.Cardinality.UNARY_UNARY,
      'SendToRfBlaster': cardinality.Cardinality.UNARY_UNARY,
      'SetLedStrip': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'FrontEnd', cardinalities, options=stub_options)


  class BetaPushFrontEndServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """#FrontEnd #ServerStreaming
    The FrontEnd server is the endpoint that most client interactions
    should use. These are public facing and used by servers in the outside
    world. This server is for streaming events.

    Note: Currently there is no security in place so this should only be used
    for localhost applications only be used behind a firewall.
    """
    def Subscribe(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def StreamButtonPressed(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaPushFrontEndStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """#FrontEnd #ServerStreaming
    The FrontEnd server is the endpoint that most client interactions
    should use. These are public facing and used by servers in the outside
    world. This server is for streaming events.

    Note: Currently there is no security in place so this should only be used
    for localhost applications only be used behind a firewall.
    """
    def Subscribe(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    Subscribe.future = None
    def StreamButtonPressed(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()


  def beta_create_PushFrontEnd_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('PushFrontEnd', 'StreamButtonPressed'): GetButtonPressedRequest.FromString,
      ('PushFrontEnd', 'Subscribe'): SubscribeRequest.FromString,
    }
    response_serializers = {
      ('PushFrontEnd', 'StreamButtonPressed'): GetButtonPressedReply.SerializeToString,
      ('PushFrontEnd', 'Subscribe'): SubscribeReply.SerializeToString,
    }
    method_implementations = {
      ('PushFrontEnd', 'StreamButtonPressed'): face_utilities.unary_stream_inline(servicer.StreamButtonPressed),
      ('PushFrontEnd', 'Subscribe'): face_utilities.unary_unary_inline(servicer.Subscribe),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_PushFrontEnd_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('PushFrontEnd', 'StreamButtonPressed'): GetButtonPressedRequest.SerializeToString,
      ('PushFrontEnd', 'Subscribe'): SubscribeRequest.SerializeToString,
    }
    response_deserializers = {
      ('PushFrontEnd', 'StreamButtonPressed'): GetButtonPressedReply.FromString,
      ('PushFrontEnd', 'Subscribe'): SubscribeReply.FromString,
    }
    cardinalities = {
      'StreamButtonPressed': cardinality.Cardinality.UNARY_STREAM,
      'Subscribe': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'PushFrontEnd', cardinalities, options=stub_options)


  class BetaArduinoServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """#Backend #Simple
    Arduino server handles interactions between Arduino brand devices & other
    servers. (New to Arduino: https://www.arduino.cc/en/Guide/Introduction)

    Note: Do not have clients depend on this it should be behind a FrontEnd.
    """
    def GetIrButtonPressed(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetSonar(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def SendToRfBlaster(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaArduinoStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """#Backend #Simple
    Arduino server handles interactions between Arduino brand devices & other
    servers. (New to Arduino: https://www.arduino.cc/en/Guide/Introduction)

    Note: Do not have clients depend on this it should be behind a FrontEnd.
    """
    def GetIrButtonPressed(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    GetIrButtonPressed.future = None
    def GetSonar(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    GetSonar.future = None
    def SendToRfBlaster(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    SendToRfBlaster.future = None


  def beta_create_Arduino_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('Arduino', 'GetIrButtonPressed'): GetIrButtonPressedRequest.FromString,
      ('Arduino', 'GetSonar'): GetSonarRequest.FromString,
      ('Arduino', 'SendToRfBlaster'): SendToRfBlasterRequest.FromString,
    }
    response_serializers = {
      ('Arduino', 'GetIrButtonPressed'): GetIrButtonPressedReply.SerializeToString,
      ('Arduino', 'GetSonar'): GetSonarReply.SerializeToString,
      ('Arduino', 'SendToRfBlaster'): SendToRfBlasterReply.SerializeToString,
    }
    method_implementations = {
      ('Arduino', 'GetIrButtonPressed'): face_utilities.unary_unary_inline(servicer.GetIrButtonPressed),
      ('Arduino', 'GetSonar'): face_utilities.unary_unary_inline(servicer.GetSonar),
      ('Arduino', 'SendToRfBlaster'): face_utilities.unary_unary_inline(servicer.SendToRfBlaster),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_Arduino_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('Arduino', 'GetIrButtonPressed'): GetIrButtonPressedRequest.SerializeToString,
      ('Arduino', 'GetSonar'): GetSonarRequest.SerializeToString,
      ('Arduino', 'SendToRfBlaster'): SendToRfBlasterRequest.SerializeToString,
    }
    response_deserializers = {
      ('Arduino', 'GetIrButtonPressed'): GetIrButtonPressedReply.FromString,
      ('Arduino', 'GetSonar'): GetSonarReply.FromString,
      ('Arduino', 'SendToRfBlaster'): SendToRfBlasterReply.FromString,
    }
    cardinalities = {
      'GetIrButtonPressed': cardinality.Cardinality.UNARY_UNARY,
      'GetSonar': cardinality.Cardinality.UNARY_UNARY,
      'SendToRfBlaster': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'Arduino', cardinalities, options=stub_options)


  class BetaWioLinkServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """#Backend #Simple
    WioLink server handles interactions between Wio Link brand devices & other
    servers. (New to Wio Link: http://wiki.seeed.cc/Wio_Link/)

    Note: Do not have clients depend on this it should be behind a FrontEnd.
    """
    def GetLux(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetTemperature(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetSound(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def SetLedStrip(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetButtonPressed(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaWioLinkStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """#Backend #Simple
    WioLink server handles interactions between Wio Link brand devices & other
    servers. (New to Wio Link: http://wiki.seeed.cc/Wio_Link/)

    Note: Do not have clients depend on this it should be behind a FrontEnd.
    """
    def GetLux(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    GetLux.future = None
    def GetTemperature(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    GetTemperature.future = None
    def GetSound(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    GetSound.future = None
    def SetLedStrip(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    SetLedStrip.future = None
    def GetButtonPressed(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    GetButtonPressed.future = None


  def beta_create_WioLink_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('WioLink', 'GetButtonPressed'): GetButtonPressedRequest.FromString,
      ('WioLink', 'GetLux'): GetLuxRequest.FromString,
      ('WioLink', 'GetSound'): GetSoundRequest.FromString,
      ('WioLink', 'GetTemperature'): GetTemperatureRequest.FromString,
      ('WioLink', 'SetLedStrip'): SetLedStripRequest.FromString,
    }
    response_serializers = {
      ('WioLink', 'GetButtonPressed'): GetButtonPressedReply.SerializeToString,
      ('WioLink', 'GetLux'): GetLuxReply.SerializeToString,
      ('WioLink', 'GetSound'): GetSoundReply.SerializeToString,
      ('WioLink', 'GetTemperature'): GetTemperatureReply.SerializeToString,
      ('WioLink', 'SetLedStrip'): SetLedStripReply.SerializeToString,
    }
    method_implementations = {
      ('WioLink', 'GetButtonPressed'): face_utilities.unary_unary_inline(servicer.GetButtonPressed),
      ('WioLink', 'GetLux'): face_utilities.unary_unary_inline(servicer.GetLux),
      ('WioLink', 'GetSound'): face_utilities.unary_unary_inline(servicer.GetSound),
      ('WioLink', 'GetTemperature'): face_utilities.unary_unary_inline(servicer.GetTemperature),
      ('WioLink', 'SetLedStrip'): face_utilities.unary_unary_inline(servicer.SetLedStrip),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_WioLink_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('WioLink', 'GetButtonPressed'): GetButtonPressedRequest.SerializeToString,
      ('WioLink', 'GetLux'): GetLuxRequest.SerializeToString,
      ('WioLink', 'GetSound'): GetSoundRequest.SerializeToString,
      ('WioLink', 'GetTemperature'): GetTemperatureRequest.SerializeToString,
      ('WioLink', 'SetLedStrip'): SetLedStripRequest.SerializeToString,
    }
    response_deserializers = {
      ('WioLink', 'GetButtonPressed'): GetButtonPressedReply.FromString,
      ('WioLink', 'GetLux'): GetLuxReply.FromString,
      ('WioLink', 'GetSound'): GetSoundReply.FromString,
      ('WioLink', 'GetTemperature'): GetTemperatureReply.FromString,
      ('WioLink', 'SetLedStrip'): SetLedStripReply.FromString,
    }
    cardinalities = {
      'GetButtonPressed': cardinality.Cardinality.UNARY_UNARY,
      'GetLux': cardinality.Cardinality.UNARY_UNARY,
      'GetSound': cardinality.Cardinality.UNARY_UNARY,
      'GetTemperature': cardinality.Cardinality.UNARY_UNARY,
      'SetLedStrip': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'WioLink', cardinalities, options=stub_options)


  class BetaPushServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """#ServerStreaming #Backend
    Push server pushes data when a sensor event occurs for the client to react
    to.
    """
    def Subscribe(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def StreamButtonPressed(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaPushStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """#ServerStreaming #Backend
    Push server pushes data when a sensor event occurs for the client to react
    to.
    """
    def Subscribe(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    Subscribe.future = None
    def StreamButtonPressed(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()


  def beta_create_Push_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('Push', 'StreamButtonPressed'): GetButtonPressedRequest.FromString,
      ('Push', 'Subscribe'): SubscribeRequest.FromString,
    }
    response_serializers = {
      ('Push', 'StreamButtonPressed'): GetButtonPressedReply.SerializeToString,
      ('Push', 'Subscribe'): SubscribeReply.SerializeToString,
    }
    method_implementations = {
      ('Push', 'StreamButtonPressed'): face_utilities.unary_stream_inline(servicer.StreamButtonPressed),
      ('Push', 'Subscribe'): face_utilities.unary_unary_inline(servicer.Subscribe),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_Push_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('Push', 'StreamButtonPressed'): GetButtonPressedRequest.SerializeToString,
      ('Push', 'Subscribe'): SubscribeRequest.SerializeToString,
    }
    response_deserializers = {
      ('Push', 'StreamButtonPressed'): GetButtonPressedReply.FromString,
      ('Push', 'Subscribe'): SubscribeReply.FromString,
    }
    cardinalities = {
      'StreamButtonPressed': cardinality.Cardinality.UNARY_STREAM,
      'Subscribe': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'Push', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
