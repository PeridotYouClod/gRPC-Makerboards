# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: sensors.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='sensors.proto',
  package='',
  syntax='proto3',
  serialized_pb=_b('\n\rsensors.proto\"\x80\x01\n\x12SubscriptionUpdate\x12\x30\n\x06status\x18\x01 \x01(\x0e\x32 .SubscriptionUpdate.UpdateStatus\"8\n\x0cUpdateStatus\x12\x08\n\x04NONE\x10\x00\x12\r\n\tSUBSCRIBE\x10\x01\x12\x0f\n\x0bUNSUBSCRIBE\x10\x02\"H\n\rSelectRequest\x12\r\n\x05table\x18\x01 \x01(\t\x12\r\n\x05limit\x18\x02 \x01(\x05\x12\x19\n\x04\x63ols\x18\x03 \x03(\x0b\x32\x0b.RequestCol\"\x1a\n\nRequestCol\x12\x0c\n\x04name\x18\x01 \x01(\t\"+\n\x0bSelectReply\x12\x1c\n\x07\x63olumns\x18\x01 \x03(\x0b\x32\x0b.DataColumn\"m\n\nDataColumn\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\x11\n\tintValues\x18\x02 \x03(\x05\x12\x14\n\x0c\x64oubleValues\x18\x03 \x03(\x01\x12\x12\n\nboolValues\x18\x04 \x03(\x08\x12\x14\n\x0cstringValues\x18\x05 \x03(\t\"\x0f\n\rGetLuxRequest\"\x1a\n\x0bGetLuxReply\x12\x0b\n\x03lux\x18\x01 \x01(\x05\"\x17\n\x15GetTemperatureRequest\"C\n\x13GetTemperatureReply\x12\x15\n\rtemperature_c\x18\x01 \x01(\x02\x12\x15\n\rtemperature_f\x18\x02 \x01(\x02\"\x11\n\x0fGetSoundRequest\"!\n\rGetSoundReply\x12\x10\n\x08loudness\x18\x01 \x01(\x05\"\x1b\n\x19GetIrButtonPressedRequest\")\n\x17GetIrButtonPressedReply\x12\x0e\n\x06\x62utton\x18\x01 \x01(\x05\"\x11\n\x0fGetSonarRequest\"!\n\rGetSonarReply\x12\x10\n\x08\x64istance\x18\x01 \x01(\x05\"\x19\n\x17GetButtonPressedRequest\"e\n\x1dSubscribeButtonPressedRequest\x12#\n\x06update\x18\x01 \x01(\x0b\x32\x13.SubscriptionUpdate\x12\x10\n\x08username\x18\x02 \x01(\t\x12\r\n\x05index\x18\x03 \x01(\x03\"=\n\x15GetButtonPressedReply\x12\x0f\n\x07pressed\x18\x01 \x01(\x08\x12\x13\n\x0bstart_index\x18\x02 \x01(\x03\"G\n\x12SetLedStripRequest\x12\x0e\n\x06length\x18\x01 \x01(\x05\x12\x12\n\nbrightness\x18\x02 \x01(\x05\x12\r\n\x05speed\x18\x03 \x01(\x05\"\x12\n\x10SetLedStripReply2\xa5\x03\n\x08\x46rontEnd\x12(\n\x06GetLux\x12\x0e.GetLuxRequest\x1a\x0c.GetLuxReply\"\x00\x12@\n\x0eGetTemperature\x12\x16.GetTemperatureRequest\x1a\x14.GetTemperatureReply\"\x00\x12.\n\x08GetSound\x12\x10.GetSoundRequest\x1a\x0e.GetSoundReply\"\x00\x12L\n\x12GetIrButtonPressed\x12\x1a.GetIrButtonPressedRequest\x1a\x18.GetIrButtonPressedReply\"\x00\x12.\n\x08GetSonar\x12\x10.GetSonarRequest\x1a\x0e.GetSonarReply\"\x00\x12\x37\n\x0bSetLedStrip\x12\x13.SetLedStripRequest\x1a\x11.SetLedStripReply\"\x00\x12\x46\n\x10GetButtonPressed\x12\x18.GetButtonPressedRequest\x1a\x16.GetButtonPressedReply\"\x00\x32\x87\x01\n\x07\x41rduino\x12L\n\x12GetIrButtonPressed\x12\x1a.GetIrButtonPressedRequest\x1a\x18.GetIrButtonPressedReply\"\x00\x12.\n\x08GetSonar\x12\x10.GetSonarRequest\x1a\x0e.GetSonarReply\"\x00\x32\xa6\x02\n\x07WioLink\x12(\n\x06GetLux\x12\x0e.GetLuxRequest\x1a\x0c.GetLuxReply\"\x00\x12@\n\x0eGetTemperature\x12\x16.GetTemperatureRequest\x1a\x14.GetTemperatureReply\"\x00\x12.\n\x08GetSound\x12\x10.GetSoundRequest\x1a\x0e.GetSoundReply\"\x00\x12\x37\n\x0bSetLedStrip\x12\x13.SetLedStripRequest\x1a\x11.SetLedStripReply\"\x00\x12\x46\n\x10GetButtonPressed\x12\x18.GetButtonPressedRequest\x1a\x16.GetButtonPressedReply\"\x00\x32/\n\x03\x44\x61o\x12(\n\x06Select\x12\x0e.SelectRequest\x1a\x0c.SelectReply\"\x00\x32\\\n\x04Push\x12T\n\x16SubscribeButtonPressed\x12\x1e.SubscribeButtonPressedRequest\x1a\x16.GetButtonPressedReply\"\x00\x30\x01\x62\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)



_SUBSCRIPTIONUPDATE_UPDATESTATUS = _descriptor.EnumDescriptor(
  name='UpdateStatus',
  full_name='SubscriptionUpdate.UpdateStatus',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='NONE', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SUBSCRIBE', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='UNSUBSCRIBE', index=2, number=2,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=90,
  serialized_end=146,
)
_sym_db.RegisterEnumDescriptor(_SUBSCRIPTIONUPDATE_UPDATESTATUS)


_SUBSCRIPTIONUPDATE = _descriptor.Descriptor(
  name='SubscriptionUpdate',
  full_name='SubscriptionUpdate',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='status', full_name='SubscriptionUpdate.status', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _SUBSCRIPTIONUPDATE_UPDATESTATUS,
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=18,
  serialized_end=146,
)


_SELECTREQUEST = _descriptor.Descriptor(
  name='SelectRequest',
  full_name='SelectRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='table', full_name='SelectRequest.table', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='limit', full_name='SelectRequest.limit', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='cols', full_name='SelectRequest.cols', index=2,
      number=3, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=148,
  serialized_end=220,
)


_REQUESTCOL = _descriptor.Descriptor(
  name='RequestCol',
  full_name='RequestCol',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='RequestCol.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=222,
  serialized_end=248,
)


_SELECTREPLY = _descriptor.Descriptor(
  name='SelectReply',
  full_name='SelectReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='columns', full_name='SelectReply.columns', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=250,
  serialized_end=293,
)


_DATACOLUMN = _descriptor.Descriptor(
  name='DataColumn',
  full_name='DataColumn',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='DataColumn.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='intValues', full_name='DataColumn.intValues', index=1,
      number=2, type=5, cpp_type=1, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='doubleValues', full_name='DataColumn.doubleValues', index=2,
      number=3, type=1, cpp_type=5, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='boolValues', full_name='DataColumn.boolValues', index=3,
      number=4, type=8, cpp_type=7, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='stringValues', full_name='DataColumn.stringValues', index=4,
      number=5, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=295,
  serialized_end=404,
)


_GETLUXREQUEST = _descriptor.Descriptor(
  name='GetLuxRequest',
  full_name='GetLuxRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=406,
  serialized_end=421,
)


_GETLUXREPLY = _descriptor.Descriptor(
  name='GetLuxReply',
  full_name='GetLuxReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='lux', full_name='GetLuxReply.lux', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=423,
  serialized_end=449,
)


_GETTEMPERATUREREQUEST = _descriptor.Descriptor(
  name='GetTemperatureRequest',
  full_name='GetTemperatureRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=451,
  serialized_end=474,
)


_GETTEMPERATUREREPLY = _descriptor.Descriptor(
  name='GetTemperatureReply',
  full_name='GetTemperatureReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='temperature_c', full_name='GetTemperatureReply.temperature_c', index=0,
      number=1, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='temperature_f', full_name='GetTemperatureReply.temperature_f', index=1,
      number=2, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=476,
  serialized_end=543,
)


_GETSOUNDREQUEST = _descriptor.Descriptor(
  name='GetSoundRequest',
  full_name='GetSoundRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=545,
  serialized_end=562,
)


_GETSOUNDREPLY = _descriptor.Descriptor(
  name='GetSoundReply',
  full_name='GetSoundReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='loudness', full_name='GetSoundReply.loudness', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=564,
  serialized_end=597,
)


_GETIRBUTTONPRESSEDREQUEST = _descriptor.Descriptor(
  name='GetIrButtonPressedRequest',
  full_name='GetIrButtonPressedRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=599,
  serialized_end=626,
)


_GETIRBUTTONPRESSEDREPLY = _descriptor.Descriptor(
  name='GetIrButtonPressedReply',
  full_name='GetIrButtonPressedReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='button', full_name='GetIrButtonPressedReply.button', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=628,
  serialized_end=669,
)


_GETSONARREQUEST = _descriptor.Descriptor(
  name='GetSonarRequest',
  full_name='GetSonarRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=671,
  serialized_end=688,
)


_GETSONARREPLY = _descriptor.Descriptor(
  name='GetSonarReply',
  full_name='GetSonarReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='distance', full_name='GetSonarReply.distance', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=690,
  serialized_end=723,
)


_GETBUTTONPRESSEDREQUEST = _descriptor.Descriptor(
  name='GetButtonPressedRequest',
  full_name='GetButtonPressedRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=725,
  serialized_end=750,
)


_SUBSCRIBEBUTTONPRESSEDREQUEST = _descriptor.Descriptor(
  name='SubscribeButtonPressedRequest',
  full_name='SubscribeButtonPressedRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='update', full_name='SubscribeButtonPressedRequest.update', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='username', full_name='SubscribeButtonPressedRequest.username', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='index', full_name='SubscribeButtonPressedRequest.index', index=2,
      number=3, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=752,
  serialized_end=853,
)


_GETBUTTONPRESSEDREPLY = _descriptor.Descriptor(
  name='GetButtonPressedReply',
  full_name='GetButtonPressedReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='pressed', full_name='GetButtonPressedReply.pressed', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='start_index', full_name='GetButtonPressedReply.start_index', index=1,
      number=2, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=855,
  serialized_end=916,
)


_SETLEDSTRIPREQUEST = _descriptor.Descriptor(
  name='SetLedStripRequest',
  full_name='SetLedStripRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='length', full_name='SetLedStripRequest.length', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='brightness', full_name='SetLedStripRequest.brightness', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='speed', full_name='SetLedStripRequest.speed', index=2,
      number=3, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=918,
  serialized_end=989,
)


_SETLEDSTRIPREPLY = _descriptor.Descriptor(
  name='SetLedStripReply',
  full_name='SetLedStripReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=991,
  serialized_end=1009,
)

_SUBSCRIPTIONUPDATE.fields_by_name['status'].enum_type = _SUBSCRIPTIONUPDATE_UPDATESTATUS
_SUBSCRIPTIONUPDATE_UPDATESTATUS.containing_type = _SUBSCRIPTIONUPDATE
_SELECTREQUEST.fields_by_name['cols'].message_type = _REQUESTCOL
_SELECTREPLY.fields_by_name['columns'].message_type = _DATACOLUMN
_SUBSCRIBEBUTTONPRESSEDREQUEST.fields_by_name['update'].message_type = _SUBSCRIPTIONUPDATE
DESCRIPTOR.message_types_by_name['SubscriptionUpdate'] = _SUBSCRIPTIONUPDATE
DESCRIPTOR.message_types_by_name['SelectRequest'] = _SELECTREQUEST
DESCRIPTOR.message_types_by_name['RequestCol'] = _REQUESTCOL
DESCRIPTOR.message_types_by_name['SelectReply'] = _SELECTREPLY
DESCRIPTOR.message_types_by_name['DataColumn'] = _DATACOLUMN
DESCRIPTOR.message_types_by_name['GetLuxRequest'] = _GETLUXREQUEST
DESCRIPTOR.message_types_by_name['GetLuxReply'] = _GETLUXREPLY
DESCRIPTOR.message_types_by_name['GetTemperatureRequest'] = _GETTEMPERATUREREQUEST
DESCRIPTOR.message_types_by_name['GetTemperatureReply'] = _GETTEMPERATUREREPLY
DESCRIPTOR.message_types_by_name['GetSoundRequest'] = _GETSOUNDREQUEST
DESCRIPTOR.message_types_by_name['GetSoundReply'] = _GETSOUNDREPLY
DESCRIPTOR.message_types_by_name['GetIrButtonPressedRequest'] = _GETIRBUTTONPRESSEDREQUEST
DESCRIPTOR.message_types_by_name['GetIrButtonPressedReply'] = _GETIRBUTTONPRESSEDREPLY
DESCRIPTOR.message_types_by_name['GetSonarRequest'] = _GETSONARREQUEST
DESCRIPTOR.message_types_by_name['GetSonarReply'] = _GETSONARREPLY
DESCRIPTOR.message_types_by_name['GetButtonPressedRequest'] = _GETBUTTONPRESSEDREQUEST
DESCRIPTOR.message_types_by_name['SubscribeButtonPressedRequest'] = _SUBSCRIBEBUTTONPRESSEDREQUEST
DESCRIPTOR.message_types_by_name['GetButtonPressedReply'] = _GETBUTTONPRESSEDREPLY
DESCRIPTOR.message_types_by_name['SetLedStripRequest'] = _SETLEDSTRIPREQUEST
DESCRIPTOR.message_types_by_name['SetLedStripReply'] = _SETLEDSTRIPREPLY

SubscriptionUpdate = _reflection.GeneratedProtocolMessageType('SubscriptionUpdate', (_message.Message,), dict(
  DESCRIPTOR = _SUBSCRIPTIONUPDATE,
  __module__ = 'sensors_pb2'
  # @@protoc_insertion_point(class_scope:SubscriptionUpdate)
  ))
_sym_db.RegisterMessage(SubscriptionUpdate)

SelectRequest = _reflection.GeneratedProtocolMessageType('SelectRequest', (_message.Message,), dict(
  DESCRIPTOR = _SELECTREQUEST,
  __module__ = 'sensors_pb2'
  # @@protoc_insertion_point(class_scope:SelectRequest)
  ))
_sym_db.RegisterMessage(SelectRequest)

RequestCol = _reflection.GeneratedProtocolMessageType('RequestCol', (_message.Message,), dict(
  DESCRIPTOR = _REQUESTCOL,
  __module__ = 'sensors_pb2'
  # @@protoc_insertion_point(class_scope:RequestCol)
  ))
_sym_db.RegisterMessage(RequestCol)

SelectReply = _reflection.GeneratedProtocolMessageType('SelectReply', (_message.Message,), dict(
  DESCRIPTOR = _SELECTREPLY,
  __module__ = 'sensors_pb2'
  # @@protoc_insertion_point(class_scope:SelectReply)
  ))
_sym_db.RegisterMessage(SelectReply)

DataColumn = _reflection.GeneratedProtocolMessageType('DataColumn', (_message.Message,), dict(
  DESCRIPTOR = _DATACOLUMN,
  __module__ = 'sensors_pb2'
  # @@protoc_insertion_point(class_scope:DataColumn)
  ))
_sym_db.RegisterMessage(DataColumn)

GetLuxRequest = _reflection.GeneratedProtocolMessageType('GetLuxRequest', (_message.Message,), dict(
  DESCRIPTOR = _GETLUXREQUEST,
  __module__ = 'sensors_pb2'
  # @@protoc_insertion_point(class_scope:GetLuxRequest)
  ))
_sym_db.RegisterMessage(GetLuxRequest)

GetLuxReply = _reflection.GeneratedProtocolMessageType('GetLuxReply', (_message.Message,), dict(
  DESCRIPTOR = _GETLUXREPLY,
  __module__ = 'sensors_pb2'
  # @@protoc_insertion_point(class_scope:GetLuxReply)
  ))
_sym_db.RegisterMessage(GetLuxReply)

GetTemperatureRequest = _reflection.GeneratedProtocolMessageType('GetTemperatureRequest', (_message.Message,), dict(
  DESCRIPTOR = _GETTEMPERATUREREQUEST,
  __module__ = 'sensors_pb2'
  # @@protoc_insertion_point(class_scope:GetTemperatureRequest)
  ))
_sym_db.RegisterMessage(GetTemperatureRequest)

GetTemperatureReply = _reflection.GeneratedProtocolMessageType('GetTemperatureReply', (_message.Message,), dict(
  DESCRIPTOR = _GETTEMPERATUREREPLY,
  __module__ = 'sensors_pb2'
  # @@protoc_insertion_point(class_scope:GetTemperatureReply)
  ))
_sym_db.RegisterMessage(GetTemperatureReply)

GetSoundRequest = _reflection.GeneratedProtocolMessageType('GetSoundRequest', (_message.Message,), dict(
  DESCRIPTOR = _GETSOUNDREQUEST,
  __module__ = 'sensors_pb2'
  # @@protoc_insertion_point(class_scope:GetSoundRequest)
  ))
_sym_db.RegisterMessage(GetSoundRequest)

GetSoundReply = _reflection.GeneratedProtocolMessageType('GetSoundReply', (_message.Message,), dict(
  DESCRIPTOR = _GETSOUNDREPLY,
  __module__ = 'sensors_pb2'
  # @@protoc_insertion_point(class_scope:GetSoundReply)
  ))
_sym_db.RegisterMessage(GetSoundReply)

GetIrButtonPressedRequest = _reflection.GeneratedProtocolMessageType('GetIrButtonPressedRequest', (_message.Message,), dict(
  DESCRIPTOR = _GETIRBUTTONPRESSEDREQUEST,
  __module__ = 'sensors_pb2'
  # @@protoc_insertion_point(class_scope:GetIrButtonPressedRequest)
  ))
_sym_db.RegisterMessage(GetIrButtonPressedRequest)

GetIrButtonPressedReply = _reflection.GeneratedProtocolMessageType('GetIrButtonPressedReply', (_message.Message,), dict(
  DESCRIPTOR = _GETIRBUTTONPRESSEDREPLY,
  __module__ = 'sensors_pb2'
  # @@protoc_insertion_point(class_scope:GetIrButtonPressedReply)
  ))
_sym_db.RegisterMessage(GetIrButtonPressedReply)

GetSonarRequest = _reflection.GeneratedProtocolMessageType('GetSonarRequest', (_message.Message,), dict(
  DESCRIPTOR = _GETSONARREQUEST,
  __module__ = 'sensors_pb2'
  # @@protoc_insertion_point(class_scope:GetSonarRequest)
  ))
_sym_db.RegisterMessage(GetSonarRequest)

GetSonarReply = _reflection.GeneratedProtocolMessageType('GetSonarReply', (_message.Message,), dict(
  DESCRIPTOR = _GETSONARREPLY,
  __module__ = 'sensors_pb2'
  # @@protoc_insertion_point(class_scope:GetSonarReply)
  ))
_sym_db.RegisterMessage(GetSonarReply)

GetButtonPressedRequest = _reflection.GeneratedProtocolMessageType('GetButtonPressedRequest', (_message.Message,), dict(
  DESCRIPTOR = _GETBUTTONPRESSEDREQUEST,
  __module__ = 'sensors_pb2'
  # @@protoc_insertion_point(class_scope:GetButtonPressedRequest)
  ))
_sym_db.RegisterMessage(GetButtonPressedRequest)

SubscribeButtonPressedRequest = _reflection.GeneratedProtocolMessageType('SubscribeButtonPressedRequest', (_message.Message,), dict(
  DESCRIPTOR = _SUBSCRIBEBUTTONPRESSEDREQUEST,
  __module__ = 'sensors_pb2'
  # @@protoc_insertion_point(class_scope:SubscribeButtonPressedRequest)
  ))
_sym_db.RegisterMessage(SubscribeButtonPressedRequest)

GetButtonPressedReply = _reflection.GeneratedProtocolMessageType('GetButtonPressedReply', (_message.Message,), dict(
  DESCRIPTOR = _GETBUTTONPRESSEDREPLY,
  __module__ = 'sensors_pb2'
  # @@protoc_insertion_point(class_scope:GetButtonPressedReply)
  ))
_sym_db.RegisterMessage(GetButtonPressedReply)

SetLedStripRequest = _reflection.GeneratedProtocolMessageType('SetLedStripRequest', (_message.Message,), dict(
  DESCRIPTOR = _SETLEDSTRIPREQUEST,
  __module__ = 'sensors_pb2'
  # @@protoc_insertion_point(class_scope:SetLedStripRequest)
  ))
_sym_db.RegisterMessage(SetLedStripRequest)

SetLedStripReply = _reflection.GeneratedProtocolMessageType('SetLedStripReply', (_message.Message,), dict(
  DESCRIPTOR = _SETLEDSTRIPREPLY,
  __module__ = 'sensors_pb2'
  # @@protoc_insertion_point(class_scope:SetLedStripReply)
  ))
_sym_db.RegisterMessage(SetLedStripReply)


import grpc
from grpc.beta import implementations as beta_implementations
from grpc.beta import interfaces as beta_interfaces
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities


class FrontEndStub(object):
  """http://www.grpc.io/docs/guides/concepts.html is good reference for #tags

  #FrontEnd #Simple
  The FrontEnd server is the endpoint that most client interactions
  should use. These are public facing and used by servers in the outside
  world.

  Note: Currently there is no security in place so this should only be used
  for localhost applications only be used behind a firewall.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetLux = channel.unary_unary(
        '/FrontEnd/GetLux',
        request_serializer=GetLuxRequest.SerializeToString,
        response_deserializer=GetLuxReply.FromString,
        )
    self.GetTemperature = channel.unary_unary(
        '/FrontEnd/GetTemperature',
        request_serializer=GetTemperatureRequest.SerializeToString,
        response_deserializer=GetTemperatureReply.FromString,
        )
    self.GetSound = channel.unary_unary(
        '/FrontEnd/GetSound',
        request_serializer=GetSoundRequest.SerializeToString,
        response_deserializer=GetSoundReply.FromString,
        )
    self.GetIrButtonPressed = channel.unary_unary(
        '/FrontEnd/GetIrButtonPressed',
        request_serializer=GetIrButtonPressedRequest.SerializeToString,
        response_deserializer=GetIrButtonPressedReply.FromString,
        )
    self.GetSonar = channel.unary_unary(
        '/FrontEnd/GetSonar',
        request_serializer=GetSonarRequest.SerializeToString,
        response_deserializer=GetSonarReply.FromString,
        )
    self.SetLedStrip = channel.unary_unary(
        '/FrontEnd/SetLedStrip',
        request_serializer=SetLedStripRequest.SerializeToString,
        response_deserializer=SetLedStripReply.FromString,
        )
    self.GetButtonPressed = channel.unary_unary(
        '/FrontEnd/GetButtonPressed',
        request_serializer=GetButtonPressedRequest.SerializeToString,
        response_deserializer=GetButtonPressedReply.FromString,
        )


class FrontEndServicer(object):
  """http://www.grpc.io/docs/guides/concepts.html is good reference for #tags

  #FrontEnd #Simple
  The FrontEnd server is the endpoint that most client interactions
  should use. These are public facing and used by servers in the outside
  world.

  Note: Currently there is no security in place so this should only be used
  for localhost applications only be used behind a firewall.
  """

  def GetLux(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetTemperature(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetSound(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetIrButtonPressed(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetSonar(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SetLedStrip(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetButtonPressed(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_FrontEndServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetLux': grpc.unary_unary_rpc_method_handler(
          servicer.GetLux,
          request_deserializer=GetLuxRequest.FromString,
          response_serializer=GetLuxReply.SerializeToString,
      ),
      'GetTemperature': grpc.unary_unary_rpc_method_handler(
          servicer.GetTemperature,
          request_deserializer=GetTemperatureRequest.FromString,
          response_serializer=GetTemperatureReply.SerializeToString,
      ),
      'GetSound': grpc.unary_unary_rpc_method_handler(
          servicer.GetSound,
          request_deserializer=GetSoundRequest.FromString,
          response_serializer=GetSoundReply.SerializeToString,
      ),
      'GetIrButtonPressed': grpc.unary_unary_rpc_method_handler(
          servicer.GetIrButtonPressed,
          request_deserializer=GetIrButtonPressedRequest.FromString,
          response_serializer=GetIrButtonPressedReply.SerializeToString,
      ),
      'GetSonar': grpc.unary_unary_rpc_method_handler(
          servicer.GetSonar,
          request_deserializer=GetSonarRequest.FromString,
          response_serializer=GetSonarReply.SerializeToString,
      ),
      'SetLedStrip': grpc.unary_unary_rpc_method_handler(
          servicer.SetLedStrip,
          request_deserializer=SetLedStripRequest.FromString,
          response_serializer=SetLedStripReply.SerializeToString,
      ),
      'GetButtonPressed': grpc.unary_unary_rpc_method_handler(
          servicer.GetButtonPressed,
          request_deserializer=GetButtonPressedRequest.FromString,
          response_serializer=GetButtonPressedReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'FrontEnd', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class BetaFrontEndServicer(object):
  """http://www.grpc.io/docs/guides/concepts.html is good reference for #tags

  #FrontEnd #Simple
  The FrontEnd server is the endpoint that most client interactions
  should use. These are public facing and used by servers in the outside
  world.

  Note: Currently there is no security in place so this should only be used
  for localhost applications only be used behind a firewall.
  """
  def GetLux(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def GetTemperature(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def GetSound(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def GetIrButtonPressed(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def GetSonar(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def SetLedStrip(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def GetButtonPressed(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


class BetaFrontEndStub(object):
  """http://www.grpc.io/docs/guides/concepts.html is good reference for #tags

  #FrontEnd #Simple
  The FrontEnd server is the endpoint that most client interactions
  should use. These are public facing and used by servers in the outside
  world.

  Note: Currently there is no security in place so this should only be used
  for localhost applications only be used behind a firewall.
  """
  def GetLux(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  GetLux.future = None
  def GetTemperature(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  GetTemperature.future = None
  def GetSound(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  GetSound.future = None
  def GetIrButtonPressed(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  GetIrButtonPressed.future = None
  def GetSonar(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  GetSonar.future = None
  def SetLedStrip(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  SetLedStrip.future = None
  def GetButtonPressed(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  GetButtonPressed.future = None


def beta_create_FrontEnd_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
  request_deserializers = {
    ('FrontEnd', 'GetButtonPressed'): GetButtonPressedRequest.FromString,
    ('FrontEnd', 'GetIrButtonPressed'): GetIrButtonPressedRequest.FromString,
    ('FrontEnd', 'GetLux'): GetLuxRequest.FromString,
    ('FrontEnd', 'GetSonar'): GetSonarRequest.FromString,
    ('FrontEnd', 'GetSound'): GetSoundRequest.FromString,
    ('FrontEnd', 'GetTemperature'): GetTemperatureRequest.FromString,
    ('FrontEnd', 'SetLedStrip'): SetLedStripRequest.FromString,
  }
  response_serializers = {
    ('FrontEnd', 'GetButtonPressed'): GetButtonPressedReply.SerializeToString,
    ('FrontEnd', 'GetIrButtonPressed'): GetIrButtonPressedReply.SerializeToString,
    ('FrontEnd', 'GetLux'): GetLuxReply.SerializeToString,
    ('FrontEnd', 'GetSonar'): GetSonarReply.SerializeToString,
    ('FrontEnd', 'GetSound'): GetSoundReply.SerializeToString,
    ('FrontEnd', 'GetTemperature'): GetTemperatureReply.SerializeToString,
    ('FrontEnd', 'SetLedStrip'): SetLedStripReply.SerializeToString,
  }
  method_implementations = {
    ('FrontEnd', 'GetButtonPressed'): face_utilities.unary_unary_inline(servicer.GetButtonPressed),
    ('FrontEnd', 'GetIrButtonPressed'): face_utilities.unary_unary_inline(servicer.GetIrButtonPressed),
    ('FrontEnd', 'GetLux'): face_utilities.unary_unary_inline(servicer.GetLux),
    ('FrontEnd', 'GetSonar'): face_utilities.unary_unary_inline(servicer.GetSonar),
    ('FrontEnd', 'GetSound'): face_utilities.unary_unary_inline(servicer.GetSound),
    ('FrontEnd', 'GetTemperature'): face_utilities.unary_unary_inline(servicer.GetTemperature),
    ('FrontEnd', 'SetLedStrip'): face_utilities.unary_unary_inline(servicer.SetLedStrip),
  }
  server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
  return beta_implementations.server(method_implementations, options=server_options)


def beta_create_FrontEnd_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
  request_serializers = {
    ('FrontEnd', 'GetButtonPressed'): GetButtonPressedRequest.SerializeToString,
    ('FrontEnd', 'GetIrButtonPressed'): GetIrButtonPressedRequest.SerializeToString,
    ('FrontEnd', 'GetLux'): GetLuxRequest.SerializeToString,
    ('FrontEnd', 'GetSonar'): GetSonarRequest.SerializeToString,
    ('FrontEnd', 'GetSound'): GetSoundRequest.SerializeToString,
    ('FrontEnd', 'GetTemperature'): GetTemperatureRequest.SerializeToString,
    ('FrontEnd', 'SetLedStrip'): SetLedStripRequest.SerializeToString,
  }
  response_deserializers = {
    ('FrontEnd', 'GetButtonPressed'): GetButtonPressedReply.FromString,
    ('FrontEnd', 'GetIrButtonPressed'): GetIrButtonPressedReply.FromString,
    ('FrontEnd', 'GetLux'): GetLuxReply.FromString,
    ('FrontEnd', 'GetSonar'): GetSonarReply.FromString,
    ('FrontEnd', 'GetSound'): GetSoundReply.FromString,
    ('FrontEnd', 'GetTemperature'): GetTemperatureReply.FromString,
    ('FrontEnd', 'SetLedStrip'): SetLedStripReply.FromString,
  }
  cardinalities = {
    'GetButtonPressed': cardinality.Cardinality.UNARY_UNARY,
    'GetIrButtonPressed': cardinality.Cardinality.UNARY_UNARY,
    'GetLux': cardinality.Cardinality.UNARY_UNARY,
    'GetSonar': cardinality.Cardinality.UNARY_UNARY,
    'GetSound': cardinality.Cardinality.UNARY_UNARY,
    'GetTemperature': cardinality.Cardinality.UNARY_UNARY,
    'SetLedStrip': cardinality.Cardinality.UNARY_UNARY,
  }
  stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
  return beta_implementations.dynamic_stub(channel, 'FrontEnd', cardinalities, options=stub_options)


class ArduinoStub(object):
  """#Backend #Simple
  Arduino server handles interactions between Arduino brand devices & other
  servers. (New to Arduino: https://www.arduino.cc/en/Guide/Introduction)

  Note: Do not have clients depend on this it should be behind a FrontEnd.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetIrButtonPressed = channel.unary_unary(
        '/Arduino/GetIrButtonPressed',
        request_serializer=GetIrButtonPressedRequest.SerializeToString,
        response_deserializer=GetIrButtonPressedReply.FromString,
        )
    self.GetSonar = channel.unary_unary(
        '/Arduino/GetSonar',
        request_serializer=GetSonarRequest.SerializeToString,
        response_deserializer=GetSonarReply.FromString,
        )


class ArduinoServicer(object):
  """#Backend #Simple
  Arduino server handles interactions between Arduino brand devices & other
  servers. (New to Arduino: https://www.arduino.cc/en/Guide/Introduction)

  Note: Do not have clients depend on this it should be behind a FrontEnd.
  """

  def GetIrButtonPressed(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetSonar(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ArduinoServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetIrButtonPressed': grpc.unary_unary_rpc_method_handler(
          servicer.GetIrButtonPressed,
          request_deserializer=GetIrButtonPressedRequest.FromString,
          response_serializer=GetIrButtonPressedReply.SerializeToString,
      ),
      'GetSonar': grpc.unary_unary_rpc_method_handler(
          servicer.GetSonar,
          request_deserializer=GetSonarRequest.FromString,
          response_serializer=GetSonarReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'Arduino', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class BetaArduinoServicer(object):
  """#Backend #Simple
  Arduino server handles interactions between Arduino brand devices & other
  servers. (New to Arduino: https://www.arduino.cc/en/Guide/Introduction)

  Note: Do not have clients depend on this it should be behind a FrontEnd.
  """
  def GetIrButtonPressed(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def GetSonar(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


class BetaArduinoStub(object):
  """#Backend #Simple
  Arduino server handles interactions between Arduino brand devices & other
  servers. (New to Arduino: https://www.arduino.cc/en/Guide/Introduction)

  Note: Do not have clients depend on this it should be behind a FrontEnd.
  """
  def GetIrButtonPressed(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  GetIrButtonPressed.future = None
  def GetSonar(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  GetSonar.future = None


def beta_create_Arduino_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
  request_deserializers = {
    ('Arduino', 'GetIrButtonPressed'): GetIrButtonPressedRequest.FromString,
    ('Arduino', 'GetSonar'): GetSonarRequest.FromString,
  }
  response_serializers = {
    ('Arduino', 'GetIrButtonPressed'): GetIrButtonPressedReply.SerializeToString,
    ('Arduino', 'GetSonar'): GetSonarReply.SerializeToString,
  }
  method_implementations = {
    ('Arduino', 'GetIrButtonPressed'): face_utilities.unary_unary_inline(servicer.GetIrButtonPressed),
    ('Arduino', 'GetSonar'): face_utilities.unary_unary_inline(servicer.GetSonar),
  }
  server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
  return beta_implementations.server(method_implementations, options=server_options)


def beta_create_Arduino_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
  request_serializers = {
    ('Arduino', 'GetIrButtonPressed'): GetIrButtonPressedRequest.SerializeToString,
    ('Arduino', 'GetSonar'): GetSonarRequest.SerializeToString,
  }
  response_deserializers = {
    ('Arduino', 'GetIrButtonPressed'): GetIrButtonPressedReply.FromString,
    ('Arduino', 'GetSonar'): GetSonarReply.FromString,
  }
  cardinalities = {
    'GetIrButtonPressed': cardinality.Cardinality.UNARY_UNARY,
    'GetSonar': cardinality.Cardinality.UNARY_UNARY,
  }
  stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
  return beta_implementations.dynamic_stub(channel, 'Arduino', cardinalities, options=stub_options)


class WioLinkStub(object):
  """#Backend #Simple
  WioLink server handles interactions between Wio Link brand devices & other
  servers. (New to Wio Link: http://wiki.seeed.cc/Wio_Link/)

  Note: Do not have clients depend on this it should be behind a FrontEnd.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetLux = channel.unary_unary(
        '/WioLink/GetLux',
        request_serializer=GetLuxRequest.SerializeToString,
        response_deserializer=GetLuxReply.FromString,
        )
    self.GetTemperature = channel.unary_unary(
        '/WioLink/GetTemperature',
        request_serializer=GetTemperatureRequest.SerializeToString,
        response_deserializer=GetTemperatureReply.FromString,
        )
    self.GetSound = channel.unary_unary(
        '/WioLink/GetSound',
        request_serializer=GetSoundRequest.SerializeToString,
        response_deserializer=GetSoundReply.FromString,
        )
    self.SetLedStrip = channel.unary_unary(
        '/WioLink/SetLedStrip',
        request_serializer=SetLedStripRequest.SerializeToString,
        response_deserializer=SetLedStripReply.FromString,
        )
    self.GetButtonPressed = channel.unary_unary(
        '/WioLink/GetButtonPressed',
        request_serializer=GetButtonPressedRequest.SerializeToString,
        response_deserializer=GetButtonPressedReply.FromString,
        )


class WioLinkServicer(object):
  """#Backend #Simple
  WioLink server handles interactions between Wio Link brand devices & other
  servers. (New to Wio Link: http://wiki.seeed.cc/Wio_Link/)

  Note: Do not have clients depend on this it should be behind a FrontEnd.
  """

  def GetLux(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetTemperature(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetSound(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SetLedStrip(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetButtonPressed(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_WioLinkServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetLux': grpc.unary_unary_rpc_method_handler(
          servicer.GetLux,
          request_deserializer=GetLuxRequest.FromString,
          response_serializer=GetLuxReply.SerializeToString,
      ),
      'GetTemperature': grpc.unary_unary_rpc_method_handler(
          servicer.GetTemperature,
          request_deserializer=GetTemperatureRequest.FromString,
          response_serializer=GetTemperatureReply.SerializeToString,
      ),
      'GetSound': grpc.unary_unary_rpc_method_handler(
          servicer.GetSound,
          request_deserializer=GetSoundRequest.FromString,
          response_serializer=GetSoundReply.SerializeToString,
      ),
      'SetLedStrip': grpc.unary_unary_rpc_method_handler(
          servicer.SetLedStrip,
          request_deserializer=SetLedStripRequest.FromString,
          response_serializer=SetLedStripReply.SerializeToString,
      ),
      'GetButtonPressed': grpc.unary_unary_rpc_method_handler(
          servicer.GetButtonPressed,
          request_deserializer=GetButtonPressedRequest.FromString,
          response_serializer=GetButtonPressedReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'WioLink', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class BetaWioLinkServicer(object):
  """#Backend #Simple
  WioLink server handles interactions between Wio Link brand devices & other
  servers. (New to Wio Link: http://wiki.seeed.cc/Wio_Link/)

  Note: Do not have clients depend on this it should be behind a FrontEnd.
  """
  def GetLux(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def GetTemperature(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def GetSound(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def SetLedStrip(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def GetButtonPressed(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


class BetaWioLinkStub(object):
  """#Backend #Simple
  WioLink server handles interactions between Wio Link brand devices & other
  servers. (New to Wio Link: http://wiki.seeed.cc/Wio_Link/)

  Note: Do not have clients depend on this it should be behind a FrontEnd.
  """
  def GetLux(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  GetLux.future = None
  def GetTemperature(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  GetTemperature.future = None
  def GetSound(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  GetSound.future = None
  def SetLedStrip(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  SetLedStrip.future = None
  def GetButtonPressed(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  GetButtonPressed.future = None


def beta_create_WioLink_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
  request_deserializers = {
    ('WioLink', 'GetButtonPressed'): GetButtonPressedRequest.FromString,
    ('WioLink', 'GetLux'): GetLuxRequest.FromString,
    ('WioLink', 'GetSound'): GetSoundRequest.FromString,
    ('WioLink', 'GetTemperature'): GetTemperatureRequest.FromString,
    ('WioLink', 'SetLedStrip'): SetLedStripRequest.FromString,
  }
  response_serializers = {
    ('WioLink', 'GetButtonPressed'): GetButtonPressedReply.SerializeToString,
    ('WioLink', 'GetLux'): GetLuxReply.SerializeToString,
    ('WioLink', 'GetSound'): GetSoundReply.SerializeToString,
    ('WioLink', 'GetTemperature'): GetTemperatureReply.SerializeToString,
    ('WioLink', 'SetLedStrip'): SetLedStripReply.SerializeToString,
  }
  method_implementations = {
    ('WioLink', 'GetButtonPressed'): face_utilities.unary_unary_inline(servicer.GetButtonPressed),
    ('WioLink', 'GetLux'): face_utilities.unary_unary_inline(servicer.GetLux),
    ('WioLink', 'GetSound'): face_utilities.unary_unary_inline(servicer.GetSound),
    ('WioLink', 'GetTemperature'): face_utilities.unary_unary_inline(servicer.GetTemperature),
    ('WioLink', 'SetLedStrip'): face_utilities.unary_unary_inline(servicer.SetLedStrip),
  }
  server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
  return beta_implementations.server(method_implementations, options=server_options)


def beta_create_WioLink_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
  request_serializers = {
    ('WioLink', 'GetButtonPressed'): GetButtonPressedRequest.SerializeToString,
    ('WioLink', 'GetLux'): GetLuxRequest.SerializeToString,
    ('WioLink', 'GetSound'): GetSoundRequest.SerializeToString,
    ('WioLink', 'GetTemperature'): GetTemperatureRequest.SerializeToString,
    ('WioLink', 'SetLedStrip'): SetLedStripRequest.SerializeToString,
  }
  response_deserializers = {
    ('WioLink', 'GetButtonPressed'): GetButtonPressedReply.FromString,
    ('WioLink', 'GetLux'): GetLuxReply.FromString,
    ('WioLink', 'GetSound'): GetSoundReply.FromString,
    ('WioLink', 'GetTemperature'): GetTemperatureReply.FromString,
    ('WioLink', 'SetLedStrip'): SetLedStripReply.FromString,
  }
  cardinalities = {
    'GetButtonPressed': cardinality.Cardinality.UNARY_UNARY,
    'GetLux': cardinality.Cardinality.UNARY_UNARY,
    'GetSound': cardinality.Cardinality.UNARY_UNARY,
    'GetTemperature': cardinality.Cardinality.UNARY_UNARY,
    'SetLedStrip': cardinality.Cardinality.UNARY_UNARY,
  }
  stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
  return beta_implementations.dynamic_stub(channel, 'WioLink', cardinalities, options=stub_options)


class DaoStub(object):
  """#Database #Simple
  Dao server handles interactions between servers and the database.

  Note: Do not have clients depend on this it should be behind a
  Backend Server behind a FrontEnd.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Select = channel.unary_unary(
        '/Dao/Select',
        request_serializer=SelectRequest.SerializeToString,
        response_deserializer=SelectReply.FromString,
        )


class DaoServicer(object):
  """#Database #Simple
  Dao server handles interactions between servers and the database.

  Note: Do not have clients depend on this it should be behind a
  Backend Server behind a FrontEnd.
  """

  def Select(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_DaoServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Select': grpc.unary_unary_rpc_method_handler(
          servicer.Select,
          request_deserializer=SelectRequest.FromString,
          response_serializer=SelectReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'Dao', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class BetaDaoServicer(object):
  """#Database #Simple
  Dao server handles interactions between servers and the database.

  Note: Do not have clients depend on this it should be behind a
  Backend Server behind a FrontEnd.
  """
  def Select(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


class BetaDaoStub(object):
  """#Database #Simple
  Dao server handles interactions between servers and the database.

  Note: Do not have clients depend on this it should be behind a
  Backend Server behind a FrontEnd.
  """
  def Select(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  Select.future = None


def beta_create_Dao_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
  request_deserializers = {
    ('Dao', 'Select'): SelectRequest.FromString,
  }
  response_serializers = {
    ('Dao', 'Select'): SelectReply.SerializeToString,
  }
  method_implementations = {
    ('Dao', 'Select'): face_utilities.unary_unary_inline(servicer.Select),
  }
  server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
  return beta_implementations.server(method_implementations, options=server_options)


def beta_create_Dao_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
  request_serializers = {
    ('Dao', 'Select'): SelectRequest.SerializeToString,
  }
  response_deserializers = {
    ('Dao', 'Select'): SelectReply.FromString,
  }
  cardinalities = {
    'Select': cardinality.Cardinality.UNARY_UNARY,
  }
  stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
  return beta_implementations.dynamic_stub(channel, 'Dao', cardinalities, options=stub_options)


class PushStub(object):
  """#ServerStreaming #FrontEnd
  Push server pushes data when a sensor event occurs for the client to react
  to.

  Note: This is currently a FrontEnd but it may not be for long. It may need
  to go behind the current FrontEnd server or it may need its own PushFrontEnd
  server.

  TODO: Resolve the note above once a choice is made.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.SubscribeButtonPressed = channel.unary_stream(
        '/Push/SubscribeButtonPressed',
        request_serializer=SubscribeButtonPressedRequest.SerializeToString,
        response_deserializer=GetButtonPressedReply.FromString,
        )


class PushServicer(object):
  """#ServerStreaming #FrontEnd
  Push server pushes data when a sensor event occurs for the client to react
  to.

  Note: This is currently a FrontEnd but it may not be for long. It may need
  to go behind the current FrontEnd server or it may need its own PushFrontEnd
  server.

  TODO: Resolve the note above once a choice is made.
  """

  def SubscribeButtonPressed(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_PushServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'SubscribeButtonPressed': grpc.unary_stream_rpc_method_handler(
          servicer.SubscribeButtonPressed,
          request_deserializer=SubscribeButtonPressedRequest.FromString,
          response_serializer=GetButtonPressedReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'Push', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class BetaPushServicer(object):
  """#ServerStreaming #FrontEnd
  Push server pushes data when a sensor event occurs for the client to react
  to.

  Note: This is currently a FrontEnd but it may not be for long. It may need
  to go behind the current FrontEnd server or it may need its own PushFrontEnd
  server.

  TODO: Resolve the note above once a choice is made.
  """
  def SubscribeButtonPressed(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


class BetaPushStub(object):
  """#ServerStreaming #FrontEnd
  Push server pushes data when a sensor event occurs for the client to react
  to.

  Note: This is currently a FrontEnd but it may not be for long. It may need
  to go behind the current FrontEnd server or it may need its own PushFrontEnd
  server.

  TODO: Resolve the note above once a choice is made.
  """
  def SubscribeButtonPressed(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()


def beta_create_Push_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
  request_deserializers = {
    ('Push', 'SubscribeButtonPressed'): SubscribeButtonPressedRequest.FromString,
  }
  response_serializers = {
    ('Push', 'SubscribeButtonPressed'): GetButtonPressedReply.SerializeToString,
  }
  method_implementations = {
    ('Push', 'SubscribeButtonPressed'): face_utilities.unary_stream_inline(servicer.SubscribeButtonPressed),
  }
  server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
  return beta_implementations.server(method_implementations, options=server_options)


def beta_create_Push_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
  request_serializers = {
    ('Push', 'SubscribeButtonPressed'): SubscribeButtonPressedRequest.SerializeToString,
  }
  response_deserializers = {
    ('Push', 'SubscribeButtonPressed'): GetButtonPressedReply.FromString,
  }
  cardinalities = {
    'SubscribeButtonPressed': cardinality.Cardinality.UNARY_STREAM,
  }
  stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
  return beta_implementations.dynamic_stub(channel, 'Push', cardinalities, options=stub_options)
# @@protoc_insertion_point(module_scope)
