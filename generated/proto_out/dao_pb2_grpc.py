# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import generated.proto_out.dao_pb2 as dao__pb2


class DaoStub(object):
  """#Database #Simple
  Dao server handles interactions between servers and the database.

  Note: Do not have clients depend on this it should be behind a
  Backend Server behind a FrontEnd.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Select = channel.unary_unary(
        '/Dao/Select',
        request_serializer=dao__pb2.SelectRequest.SerializeToString,
        response_deserializer=dao__pb2.SelectReply.FromString,
        )


class DaoServicer(object):
  """#Database #Simple
  Dao server handles interactions between servers and the database.

  Note: Do not have clients depend on this it should be behind a
  Backend Server behind a FrontEnd.
  """

  def Select(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_DaoServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Select': grpc.unary_unary_rpc_method_handler(
          servicer.Select,
          request_deserializer=dao__pb2.SelectRequest.FromString,
          response_serializer=dao__pb2.SelectReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'Dao', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
