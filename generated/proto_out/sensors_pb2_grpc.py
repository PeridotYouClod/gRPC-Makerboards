# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import generated.proto_out.sensors_pb2 as sensors__pb2


class FrontEndStub(object):
  """http://www.grpc.io/docs/guides/concepts.html is good reference for #tags

  #FrontEnd #Simple
  The FrontEnd server is the endpoint that most client interactions
  should use. These are public facing and used by servers in the outside
  world.

  Note: Currently there is no security in place so this should only be used
  for localhost applications only be used behind a firewall.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetLux = channel.unary_unary(
        '/FrontEnd/GetLux',
        request_serializer=sensors__pb2.GetLuxRequest.SerializeToString,
        response_deserializer=sensors__pb2.GetLuxReply.FromString,
        )
    self.GetTemperature = channel.unary_unary(
        '/FrontEnd/GetTemperature',
        request_serializer=sensors__pb2.GetTemperatureRequest.SerializeToString,
        response_deserializer=sensors__pb2.GetTemperatureReply.FromString,
        )
    self.GetSound = channel.unary_unary(
        '/FrontEnd/GetSound',
        request_serializer=sensors__pb2.GetSoundRequest.SerializeToString,
        response_deserializer=sensors__pb2.GetSoundReply.FromString,
        )
    self.GetIrButtonPressed = channel.unary_unary(
        '/FrontEnd/GetIrButtonPressed',
        request_serializer=sensors__pb2.GetIrButtonPressedRequest.SerializeToString,
        response_deserializer=sensors__pb2.GetIrButtonPressedReply.FromString,
        )
    self.GetSonar = channel.unary_unary(
        '/FrontEnd/GetSonar',
        request_serializer=sensors__pb2.GetSonarRequest.SerializeToString,
        response_deserializer=sensors__pb2.GetSonarReply.FromString,
        )
    self.SetLedStrip = channel.unary_unary(
        '/FrontEnd/SetLedStrip',
        request_serializer=sensors__pb2.SetLedStripRequest.SerializeToString,
        response_deserializer=sensors__pb2.SetLedStripReply.FromString,
        )
    self.GetButtonPressed = channel.unary_unary(
        '/FrontEnd/GetButtonPressed',
        request_serializer=sensors__pb2.GetButtonPressedRequest.SerializeToString,
        response_deserializer=sensors__pb2.GetButtonPressedReply.FromString,
        )
    self.SendToRfBlaster = channel.unary_unary(
        '/FrontEnd/SendToRfBlaster',
        request_serializer=sensors__pb2.SendToRfBlasterRequest.SerializeToString,
        response_deserializer=sensors__pb2.SendToRfBlasterReply.FromString,
        )


class FrontEndServicer(object):
  """http://www.grpc.io/docs/guides/concepts.html is good reference for #tags

  #FrontEnd #Simple
  The FrontEnd server is the endpoint that most client interactions
  should use. These are public facing and used by servers in the outside
  world.

  Note: Currently there is no security in place so this should only be used
  for localhost applications only be used behind a firewall.
  """

  def GetLux(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetTemperature(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetSound(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetIrButtonPressed(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetSonar(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SetLedStrip(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetButtonPressed(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SendToRfBlaster(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_FrontEndServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetLux': grpc.unary_unary_rpc_method_handler(
          servicer.GetLux,
          request_deserializer=sensors__pb2.GetLuxRequest.FromString,
          response_serializer=sensors__pb2.GetLuxReply.SerializeToString,
      ),
      'GetTemperature': grpc.unary_unary_rpc_method_handler(
          servicer.GetTemperature,
          request_deserializer=sensors__pb2.GetTemperatureRequest.FromString,
          response_serializer=sensors__pb2.GetTemperatureReply.SerializeToString,
      ),
      'GetSound': grpc.unary_unary_rpc_method_handler(
          servicer.GetSound,
          request_deserializer=sensors__pb2.GetSoundRequest.FromString,
          response_serializer=sensors__pb2.GetSoundReply.SerializeToString,
      ),
      'GetIrButtonPressed': grpc.unary_unary_rpc_method_handler(
          servicer.GetIrButtonPressed,
          request_deserializer=sensors__pb2.GetIrButtonPressedRequest.FromString,
          response_serializer=sensors__pb2.GetIrButtonPressedReply.SerializeToString,
      ),
      'GetSonar': grpc.unary_unary_rpc_method_handler(
          servicer.GetSonar,
          request_deserializer=sensors__pb2.GetSonarRequest.FromString,
          response_serializer=sensors__pb2.GetSonarReply.SerializeToString,
      ),
      'SetLedStrip': grpc.unary_unary_rpc_method_handler(
          servicer.SetLedStrip,
          request_deserializer=sensors__pb2.SetLedStripRequest.FromString,
          response_serializer=sensors__pb2.SetLedStripReply.SerializeToString,
      ),
      'GetButtonPressed': grpc.unary_unary_rpc_method_handler(
          servicer.GetButtonPressed,
          request_deserializer=sensors__pb2.GetButtonPressedRequest.FromString,
          response_serializer=sensors__pb2.GetButtonPressedReply.SerializeToString,
      ),
      'SendToRfBlaster': grpc.unary_unary_rpc_method_handler(
          servicer.SendToRfBlaster,
          request_deserializer=sensors__pb2.SendToRfBlasterRequest.FromString,
          response_serializer=sensors__pb2.SendToRfBlasterReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'FrontEnd', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class PushFrontEndStub(object):
  """#FrontEnd #ServerStreaming
  The FrontEnd server is the endpoint that most client interactions
  should use. These are public facing and used by servers in the outside
  world. This server is for streaming events.

  Note: Currently there is no security in place so this should only be used
  for localhost applications only be used behind a firewall.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Subscribe = channel.unary_unary(
        '/PushFrontEnd/Subscribe',
        request_serializer=sensors__pb2.SubscribeRequest.SerializeToString,
        response_deserializer=sensors__pb2.SubscribeReply.FromString,
        )
    self.StreamButtonPressed = channel.unary_stream(
        '/PushFrontEnd/StreamButtonPressed',
        request_serializer=sensors__pb2.GetButtonPressedRequest.SerializeToString,
        response_deserializer=sensors__pb2.GetButtonPressedReply.FromString,
        )


class PushFrontEndServicer(object):
  """#FrontEnd #ServerStreaming
  The FrontEnd server is the endpoint that most client interactions
  should use. These are public facing and used by servers in the outside
  world. This server is for streaming events.

  Note: Currently there is no security in place so this should only be used
  for localhost applications only be used behind a firewall.
  """

  def Subscribe(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def StreamButtonPressed(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_PushFrontEndServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Subscribe': grpc.unary_unary_rpc_method_handler(
          servicer.Subscribe,
          request_deserializer=sensors__pb2.SubscribeRequest.FromString,
          response_serializer=sensors__pb2.SubscribeReply.SerializeToString,
      ),
      'StreamButtonPressed': grpc.unary_stream_rpc_method_handler(
          servicer.StreamButtonPressed,
          request_deserializer=sensors__pb2.GetButtonPressedRequest.FromString,
          response_serializer=sensors__pb2.GetButtonPressedReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'PushFrontEnd', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class ArduinoStub(object):
  """#Backend #Simple
  Arduino server handles interactions between Arduino brand devices & other
  servers. (New to Arduino: https://www.arduino.cc/en/Guide/Introduction)

  Note: Do not have clients depend on this it should be behind a FrontEnd.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetIrButtonPressed = channel.unary_unary(
        '/Arduino/GetIrButtonPressed',
        request_serializer=sensors__pb2.GetIrButtonPressedRequest.SerializeToString,
        response_deserializer=sensors__pb2.GetIrButtonPressedReply.FromString,
        )
    self.GetSonar = channel.unary_unary(
        '/Arduino/GetSonar',
        request_serializer=sensors__pb2.GetSonarRequest.SerializeToString,
        response_deserializer=sensors__pb2.GetSonarReply.FromString,
        )
    self.SendToRfBlaster = channel.unary_unary(
        '/Arduino/SendToRfBlaster',
        request_serializer=sensors__pb2.SendToRfBlasterRequest.SerializeToString,
        response_deserializer=sensors__pb2.SendToRfBlasterReply.FromString,
        )


class ArduinoServicer(object):
  """#Backend #Simple
  Arduino server handles interactions between Arduino brand devices & other
  servers. (New to Arduino: https://www.arduino.cc/en/Guide/Introduction)

  Note: Do not have clients depend on this it should be behind a FrontEnd.
  """

  def GetIrButtonPressed(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetSonar(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SendToRfBlaster(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ArduinoServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetIrButtonPressed': grpc.unary_unary_rpc_method_handler(
          servicer.GetIrButtonPressed,
          request_deserializer=sensors__pb2.GetIrButtonPressedRequest.FromString,
          response_serializer=sensors__pb2.GetIrButtonPressedReply.SerializeToString,
      ),
      'GetSonar': grpc.unary_unary_rpc_method_handler(
          servicer.GetSonar,
          request_deserializer=sensors__pb2.GetSonarRequest.FromString,
          response_serializer=sensors__pb2.GetSonarReply.SerializeToString,
      ),
      'SendToRfBlaster': grpc.unary_unary_rpc_method_handler(
          servicer.SendToRfBlaster,
          request_deserializer=sensors__pb2.SendToRfBlasterRequest.FromString,
          response_serializer=sensors__pb2.SendToRfBlasterReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'Arduino', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class WioLinkStub(object):
  """#Backend #Simple
  WioLink server handles interactions between Wio Link brand devices & other
  servers. (New to Wio Link: http://wiki.seeed.cc/Wio_Link/)

  Note: Do not have clients depend on this it should be behind a FrontEnd.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetLux = channel.unary_unary(
        '/WioLink/GetLux',
        request_serializer=sensors__pb2.GetLuxRequest.SerializeToString,
        response_deserializer=sensors__pb2.GetLuxReply.FromString,
        )
    self.GetTemperature = channel.unary_unary(
        '/WioLink/GetTemperature',
        request_serializer=sensors__pb2.GetTemperatureRequest.SerializeToString,
        response_deserializer=sensors__pb2.GetTemperatureReply.FromString,
        )
    self.GetSound = channel.unary_unary(
        '/WioLink/GetSound',
        request_serializer=sensors__pb2.GetSoundRequest.SerializeToString,
        response_deserializer=sensors__pb2.GetSoundReply.FromString,
        )
    self.SetLedStrip = channel.unary_unary(
        '/WioLink/SetLedStrip',
        request_serializer=sensors__pb2.SetLedStripRequest.SerializeToString,
        response_deserializer=sensors__pb2.SetLedStripReply.FromString,
        )
    self.GetButtonPressed = channel.unary_unary(
        '/WioLink/GetButtonPressed',
        request_serializer=sensors__pb2.GetButtonPressedRequest.SerializeToString,
        response_deserializer=sensors__pb2.GetButtonPressedReply.FromString,
        )


class WioLinkServicer(object):
  """#Backend #Simple
  WioLink server handles interactions between Wio Link brand devices & other
  servers. (New to Wio Link: http://wiki.seeed.cc/Wio_Link/)

  Note: Do not have clients depend on this it should be behind a FrontEnd.
  """

  def GetLux(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetTemperature(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetSound(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SetLedStrip(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetButtonPressed(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_WioLinkServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetLux': grpc.unary_unary_rpc_method_handler(
          servicer.GetLux,
          request_deserializer=sensors__pb2.GetLuxRequest.FromString,
          response_serializer=sensors__pb2.GetLuxReply.SerializeToString,
      ),
      'GetTemperature': grpc.unary_unary_rpc_method_handler(
          servicer.GetTemperature,
          request_deserializer=sensors__pb2.GetTemperatureRequest.FromString,
          response_serializer=sensors__pb2.GetTemperatureReply.SerializeToString,
      ),
      'GetSound': grpc.unary_unary_rpc_method_handler(
          servicer.GetSound,
          request_deserializer=sensors__pb2.GetSoundRequest.FromString,
          response_serializer=sensors__pb2.GetSoundReply.SerializeToString,
      ),
      'SetLedStrip': grpc.unary_unary_rpc_method_handler(
          servicer.SetLedStrip,
          request_deserializer=sensors__pb2.SetLedStripRequest.FromString,
          response_serializer=sensors__pb2.SetLedStripReply.SerializeToString,
      ),
      'GetButtonPressed': grpc.unary_unary_rpc_method_handler(
          servicer.GetButtonPressed,
          request_deserializer=sensors__pb2.GetButtonPressedRequest.FromString,
          response_serializer=sensors__pb2.GetButtonPressedReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'WioLink', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class PushStub(object):
  """#ServerStreaming #Backend
  Push server pushes data when a sensor event occurs for the client to react
  to.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Subscribe = channel.unary_unary(
        '/Push/Subscribe',
        request_serializer=sensors__pb2.SubscribeRequest.SerializeToString,
        response_deserializer=sensors__pb2.SubscribeReply.FromString,
        )
    self.StreamButtonPressed = channel.unary_stream(
        '/Push/StreamButtonPressed',
        request_serializer=sensors__pb2.GetButtonPressedRequest.SerializeToString,
        response_deserializer=sensors__pb2.GetButtonPressedReply.FromString,
        )


class PushServicer(object):
  """#ServerStreaming #Backend
  Push server pushes data when a sensor event occurs for the client to react
  to.
  """

  def Subscribe(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def StreamButtonPressed(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_PushServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Subscribe': grpc.unary_unary_rpc_method_handler(
          servicer.Subscribe,
          request_deserializer=sensors__pb2.SubscribeRequest.FromString,
          response_serializer=sensors__pb2.SubscribeReply.SerializeToString,
      ),
      'StreamButtonPressed': grpc.unary_stream_rpc_method_handler(
          servicer.StreamButtonPressed,
          request_deserializer=sensors__pb2.GetButtonPressedRequest.FromString,
          response_serializer=sensors__pb2.GetButtonPressedReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'Push', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
